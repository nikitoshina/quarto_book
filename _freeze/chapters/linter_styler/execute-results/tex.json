{
  "hash": "893fcc3fcc3e0c84fa648b537880659f",
  "result": {
    "markdown": "---\ntitle: \"Style and Lint your Code\"\neval: false\n---\n\n\n\n## Tidyverse Style \nWhile immersing yourself in coding, you might neglect aesthetics like proper indentation or line breaks, which could make your code less readable and more error-prone. It's crucial to adopt certain coding practices to enhance readability and minimize errors. To help with this, we will explore R code conventions and introduce `styler` and `lintr`, packages that improve code aesthetics and detect potential errors.\n\nA good coding style, much like correct punctuation, significantly enhances readability. It's important to remember that while some guidelines improve usability, others may be subjective. However, their true value lies in fostering consistency, which simplifies the coding process.\n\nTwo R packages, `styler` and `lintr`, support this style guide by offering interactive restyling of code and automated style checks, respectively.\n\n### White Spaces and Indentation\n\nAdhere to a two-space indentation to illustrate the structure and hierarchy in your code. Function contents should also follow this two-space rule. For functions with pipes, start a new line for each pipe and indent them accordingly, ensuring clarity and readability.\n\n::::: columns\n\n::: {.column width=\"48%\"}\n\nGood\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:10) {\n  print(i)\n}\n\niris %>%\n  group_by(Species) %>%\n  summarize_if(is.numeric, mean) %>%\n  ungroup() %>%\n  gather(measure, value, -Species) %>%\n  arrange(value)\n```\n:::\n\n\n:::\n\n::: {.column width=\"4%\"}\n<!-- empty column to create gap -->\n:::\n\n::: {.column width=\"48%\"}\n\nBad\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:10){\nprint(i)}\n\niris %>% group_by(Species) %>% summarize_all(mean) %>%\nungroup %>% gather(measure, value, -Species) %>%\narrange(value)\n```\n:::\n\n\n:::\n\n:::::\n\n### Naming Conventions\n\nR has a unique operation `<-` used for assigning variables. You should always use `<-` as an assignment operator over `=` (yes, Python enthusiasts, I'm looking at you). One of the hardest things in all of programming is naming your variables. In R, we use `snake_case` over `camelCase` (JavaScript enthusiasts, take note) or anything else. For variables, use nouns and don't hesitate to make the names a bit longer. Aim for the perfect balance where your code can be readable yet concise. For functions, always use verbs, since functions perform actions.\n\n::::: columns\n\n::: {.column width=\"48%\"}\n\nGood:\n\n\n::: {.cell}\n\n```{.r .cell-code}\naverage_height <- 1.70\nadd_row()\npermute()\n```\n:::\n\n\n:::\n\n::: {.column width=\"4%\"}\n<!-- empty column to create gap -->\n:::\n\n::: {.column width=\"48%\"}\n\nBad:\n\n\n::: {.cell}\n\n```{.r .cell-code}\naverageHeight = 1.70\nAverageHeight = 1.70\nrow_adder()\npermutation()\n```\n:::\n\n\n\n:::\n\n:::::\n\n\n### Use of Braces\n\nUtilize braces `{}` in your R code strategically to boost readability, grouping together commands that operate in tandem.\n\nFor if-else statements, place the opening brace `{` on the same line as the condition, and position the closing brace `}` on a new line. Ensure that the `else` statement shares a line with the closing brace of the preceding `if` section. This configuration facilitates easy identification of distinct code blocks.\n\n\n::::: columns\n\n::: {.column width=\"43%\"}\n\n\n\nGood\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (condition) {\n  action1()\n} else {\n  action2()\n}\n```\n:::\n\n\n:::\n\n::: {.column width=\"4%\"}\n<!-- empty column to create gap -->\n:::\n\n::: {.column width=\"43%\"}\n\nBad\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (condition) \n{\naction1()\n}\nelse \n{\naction2()\n}\n```\n:::\n\n\n:::\n\n:::::\n\n### Comments\n\nCommenting your code is a critical practice that can save you time and prevent confusion later. Even though your code should aim to be self-explanatory, comments provide invaluable context about the reasoning behind your code and help document key findings and decisions in data analysis. \n\nUse `#` and a space to write a comment. Stick to sentence case and only use a full stop at the end if your comment spans multiple sentences. Begin each line of the comment with `#` and a space.\n\nIf you find you need many comments to explain your code, consider refining it for clarity. A code that requires an excess of comments may be better suited to a verbose platform, such as Quarto.\n\n::::: columns\n\n\n::: {.column width=\"48%\"}\n\nGood: \n```\n# Calculate average height - this metric is used for normalization\n```\n:::\n\n::: {.column width=\"4%\"}\n<!-- empty column to create gap -->\n:::\n\n::: {.column width=\"48%\"}\n\nBad: \n```\n# We are finding the average height\n\n#We will sum all of the heights and divide by the number of heights\n```\n:::\n\n:::::\n\n\n\n### Long Functions\n\nAim to confine your code within 80 characters per line. This fits well on a standard printed page using a readable font size. If you find your code exceeding this limit, consider it a hint to encapsulate some of your code into a separate function.\n\nFor function calls that extend beyond a single line, allocate separate lines for the function name, each of its arguments, and the closing parenthesis. This practice enhances readability and future edits.\n\n\nGood\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlong_function_name <- function(argument1,\n                               argument2,\n                               argument3,\n                               argument4) {\n  # function body\n}\n```\n:::\n\n\n\n\nBad\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlong_function_name <- function(argument1, argument2, argument3, argument4) {\n  # function body\n}\n```\n:::\n\n\n\n\nThe R packages `styler` and `lintr` can automatically enforce these guidelines, making them beneficial tools for learning these conventions.\n\nThe whole style guide should take longer then 20 minutes to read, so please go through it: [tidyverse style guide](https://style.tidyverse.org/index.html)\n\n\n## Styler\n\nStyler, an R package, formats your code in line with the tidyverse style guide. It's straightforward to install using `install.packages(\"styler\")`. After installation, you'll find a new function in the `Addins` menu at the top of your RStudio window. It's advisable to set a keyboard shortcut, such as \"Command + Shift + a\", for the \"Style Selection\" function for easy access.\n\nBefore\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris %>% select(Sepal.Length, Sepal.Width, Species) %>% ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point()\n```\n:::\n\n\nAfter\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris %>%\n  select(Sepal.Length, Sepal.Width, Species) %>%\n  ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) +\n  geom_point()\n```\n:::\n\n\n\n## Linter\n\nStatic code analysis is a method of debugging by examining the code without running it. In the context of R programming, linters are tools that perform static code analysis. The primary purpose of a linter is to catch potential errors, enforce coding standards, and to ensure consistent style across a project.\n\nR's `lintr` package is a static code analysis tool that flags style, coding and syntax issues. Here's a brief explanation of these three components:\n\n1. **Style Issues**: `lintr` checks if the code adheres to the styling guidelines, such as those defined in the Tidyverse Style Guide. It checks for correct indentation, line lengths, usage of spaces around operators, and more.\n\n2. **Coding Issues**: `lintr` looks for potential coding errors and suboptimal code, such as usage of undefined variables, usage of `=` instead of `<-` for assignments, or the presence of TODO comments, etc.\n\n3. **Syntax Issues**: `lintr` checks for any syntax errors in the code, like missing parentheses or incorrect usage of language keywords.\n\nStatic code analysis with `lintr` can be performed automatically within certain development environments, such as RStudio, or it can be invoked manually from the R console. It greatly helps in improving code quality, readability, and maintainability.\n\n`install.packages(\"lintr\")` \n`lintr::lint(filename = \"R/bad.R\")`\nRead the documentation for more information: [lintr](https://lintr.r-lib.org/index.html).\n\n> Styler and Linter might appear similar, but they have different functions. Styler is faster and tidies up your code for better readability, while Linter is a bit slower but essential for spotting and avoiding errors in your code. So, Styler makes your code look neat, and Linter keeps it bug-free.\n\n## Why Care?\n\nYou may wonder, if you're comfortable with your coding style, why use these tools?\nWhile there are subjective benefits, the primary reason is that they enhance your code's accessibility,\neliminate irrelevant stylistic changes from git commits, and ensure cross-OS functionality.\n\n> Mac and Windows represent tabs with different symbols. If your code contains tabs,\nit may fail on a different OS. To ensure compatibility, use spaces (your editor can convert tabs into spaces).\n\n",
    "supporting": [
      "linter_styler_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": true
  }
}