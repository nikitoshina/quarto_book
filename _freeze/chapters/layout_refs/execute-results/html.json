{
  "hash": "f0d3bacd640a80637cd2a511f6f5e87a",
  "result": {
    "markdown": "---\ntitle: \"Layout and References\"\neditor: visual\n---\n\n\n## Knitr\n\n`knitr` is a package that takes care of the middle step between evaluating code and producing pdf/html. The package runs your code and places its output into a final markdown file, which is later converted by pandoc.\n\n`knitr` lets you set cell options that influence code blocks' execution and output. They are put at the top of a block within comments. For example:\n\n\n::: {#fig-plots .cell layout-ncol=\"2\"}\n\n````{.cell-code  code-fold=\"show\" code-summary=\"Collapse Code\"}\n```{{r}}\n#| echo: \"fenced\"\n#| label: fig-plots\n#| fig-cap: Plots\n#| fig-subcap:\n#|   - \"Sunspot\"\n#|   - \"US Population\"\n#| layout-ncol: 2\n#| code-fold: show\n#| code-summary: \"Collapse Code\"\n\nplot(sunspot.year)\nplot(uspop)\n```\n````\n\n::: {.cell-output-display}\n![Sunspot](layout_refs_files/figure-html/fig-plots-1.png){#fig-plots-1 width=672}\n:::\n\n::: {.cell-output-display}\n![US Population](layout_refs_files/figure-html/fig-plots-2.png){#fig-plots-2 width=672}\n:::\n\nPlots\n:::\n\n\nThere is large number of options, but I will show the most commonly used ones. To begin in @fig-plots, `label` is a unique id for a code cell, which can be referred to in text with `@fig-plots`. Similarly, you can refer to tables, chapter, and files. `fig-cap` defines a caption for the entire plot. `fig-subcap` gives the two plots their individual sub-captions. `layout-ncol` let's us display our plots, pictures, etc. in separate columns. And `plot()` makes the plots. If you would like your code to fold use `code-fold = true,` above option `show` was used to have it opened by default. `code-summary` defines text for collapsed code blocks.\n\nAnother common options to use within code blocks are:\n\n| Option  | Value    | Explanation                                                |\n|-------------------|-------------------|----------------------------------|\n| eval    | true     | Whether to evaluate the code and include its results       |\n| echo    | true     | Whether to display code along with its results             |\n| warning | true     | Whether to display warnings                                |\n| error   | false    | Whether to display errors                                  |\n| message | true     | Whether to display messages                                |\n| include | true     | Prevents any output (code, results) from being included    |\n| tidy    | false    | Whether to reformat code in a tidy way when displaying it  |\n| results | \"markup\" | Type of output format: \"markup\", \"asis\", \"hold\", or \"hide\" |\n| cache   | false    | Whether to cache results for future renders                |\n\n: from R Markdown Cheat Sheet\n\n`tidy: true` is super useful once you want to include code inside your document as it will format it nicely.\n\n## Div Blocks\n\nIf you are familiar with HTML you will recognize \\<div\\> blocks. You can add div blocks with wrapping text in `:::` or more semicolons. It is useful when you want put pictures in a grid. Here is a simple example:\n\n``` markdown\n::: {layout-ncol=\"2\"}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n:::\n```\n\nIt must be separated from the preceding and following blocks by blank lines. Divs can be nested inside other Divs. For example, here we put a note and some text onto the margin.\n\n```         \n:::: column-margin\n\n::: callout-note\nHere is a Note!\n:::\n\nMore content.\n::::\n```\n\n::: column-margin\n::: callout-note\nHere is a Note!\n:::\n\nMore content.\n:::\n\nThe `pagebreak` short code enables you to insert a native page break into a document that will be compatible with all the other formats:\n```{.markdown shortcodes=\"false\"}\nFirst Page\n\n{{< pagebreak >}}\n\nSecond Page\n```\n\nBecause R, YAML, HTML, LaTeX have different notations for <!-- hiding or --> commenting. So, the one that will work universally within quarto is HTML's `<!-- comment here -->`.\n\n## Diagrams\n\nYou can also create beautiful [UML](https://www.uml.org/) (Unified Modeling Language) diagrams within quarto with [Mermaid](https://mermaid.js.org/) and [Graphviz](https://graphviz.org/). The flow chart below was maid with Mermaid!\n\n\n```{mermaid}\nflowchart LR\n  A[Hard edge] --> B(Round edge)\n  B --> C{Decision}\n  C --> D[Result one]\n  C --> E[Result two]\n```\n\n\n\n## Citations\n\n> \"Proper citation adds credibility to your work and acknowledges the work of others.\" - *Chat GPT*\n\nAdding citations to your work shouldn't be stressful or confusing. With Quarto's seamless integration with Zotero, you can easily add citations in your preferred style and create a reference list, all without hassle. How cool is that? I think pretty cool.\n\nQuarto utilizes Pandoc to generate citations and bibliographies in your preferred style. To source your citations, you'll need a .bib or .bibtex file, and optionally a .csl file for the citation style. Simply, add `bibliography: references.bib` to you YAML header in `_quarto.yml`.\n\n\n::: {.cell}\n\n```{.yaml .cell-code}\nbibliography: references.bib\n```\n:::\n\n\nYou can easily cite your article using `@yourcitation9999`. Visual mode also provides suggestions, and entering the article's DOI will help locate and insert it even if it is not in your bibliography. For more information on citation methods, see [Quarto Citation](https://quarto.org/docs/authoring/footnotes-and-citations.html) and [Pandoc Citations](https://pandoc.org/MANUAL.html#citations).\n\n| Markdown Format                               | Output (author-date format)               |\n|----------------------------|--------------------------------------------|\n| \\@abadie2017 says cluster you SE.             | @abadie2017 says cluster you SE.          |\n| Some thing smart \\[\\@abadie2017; \\@bai2009\\]. | Some thing smart [@abadie2017; @bai2009]. |\n| Abadie says cluster \\[-\\@abadie2017\\].        | Abadie says cluster [-@abadie2017].       |\n\nIf you've successfully created your bibliography in Zotero, adding citations to your document will be a breeze. Simply start typing and Zotero will suggest citations to add to your bibliography file. For a paper with more than 10 citations, I recommend using Better Bibtex, which allows you to connect citation keys to the paper as you write, just make sure Zotero is open.\n\nTo generate your citations from a document (say cited in Obsidian) without having to re-cite everything, you can use the `bbt_update_bib()` function from the [rbbt](https://github.com/paleolimbot/rbbt) package. Ensure that Zotero is running and that you're in the markdown document where you want to update citations. Run the `bbt_update_bib()` function to create a bibliography, and specify any additional arguments as needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbbt_update_bib(\n  path_rmd, # Path to your Markdown document.\n  path_bib = bbt_guess_bib_file(path_rmd), # Path to the references.bib file\n  translator = bbt_guess_translator(path_bib), # type of bibliography file to generate: CSL-JSON, BibLaTeX, BibTeX, and CSL YAML.\n)\n```\n:::\n",
    "supporting": [
      "layout_refs_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}