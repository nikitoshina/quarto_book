{
  "hash": "334542d51e838dd19f86c1d327ea63cc",
  "result": {
    "markdown": "---\ntitle: \"Optimizing Data Validation\"\ncode-annotations: hover\nerror: false\nmessage: false\n---\n\n\nData validation is a crucial part of data analysis, encompassing the maintenance of data integrity, accuracy, and cleanliness for computational tasks. Since the results of analysis are heavily dependent on the quality of the input data, having a robust validation process is essential. A lack of such a process can lead to the effect of \"Garbage in, garbage out\".\n\nImagine dedicating hours to an analysis only to discover a duplicate row or sporadic NAs. The key to avoid such scenarios lies in regular data checks. With dynamic data, automating these checks becomes the solution. You can write a function to perform these checks or set up data validation pipelines for multiple checks. If the requirement includes sharing validation results, generate reports accordingly.\n\nWhile this might seem daunting, there are numerous R packages, along with native functions, specifically designed to significantly simplify this task.\n\n## Manual Inspection\n\nDespite the convenience of automation, remember that you can't address what you're not aware of. Sometimes, data may not be ready for immediate analysis and may require cleaning before validation. Therefore, it's essential to manually open the files, inspect the tables and their values, and conduct preliminary exploratory analysis. This approach not only gives you a comprehensive understanding of the data at hand but can also save time in the long run by helping you avoid unfit data for analysis. Lastly, always verify your results by reviewing the output table, an important yet simple step to remain fully engaged with the raw data.\n\n![https://xkcd.com/2582/](https://imgs.xkcd.com/comics/data_trap.png)\n\n## Handling Data Issues\n\n### Base R\n\nIn the event of data issues, it's crucial to stop the script execution and alert the user. Base R offers several functions to facilitate this. For instance, the `is_numeric()` function, along with its `is_` counterparts, are traditional examples. Control flow functions like `if`, `else`, `stop()`, and logical operators prove to be quite useful. Lastly, don't forget the `duplicated()`, `unique()`, and `dplyr`'s `distinct()` functions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, 2, 3)\ndf <- data.frame(x = c(x, 1), y = c(x * 2, 2))\nif (!is.numeric(x)) stop(\"x is not numeric!\") # <1>\nstopifnot(is.numeric(x)) # <2>\nif (!all(x > 0)) stop(\"x contains non-positive values!\") # <3>\nif (any(duplicated(x))) stop(\"x contains duplicated values!\") # <4>\nif (nrow(dplyr::distinct(df)) != nrow(df)) warning(\"df has duplicated rows!\") # <5>\n```\n:::\n\n\n1. Stops execution if `x` isn't numeric.\n2. Halts if `x` isn't numeric.\n3. Stops the process if `x` contains non-positive values.\n4. Halts execution if `x` has duplicates.\n5. Issues a warning if `df` has duplicate rows.\n\n### Assert Your Conditions\n\n`assertr` is an excellent package for tidyverse-compatible data validation. Rather than manually running checks, you can add an assert statement to verify your assumptions about the data. If the assumption holds, the code continues running; however, if it fails, an error is thrown and execution is halted.\n\n`assertr` provides functions such as `verify()`, `assert()`, `insist()`, and `chain()`, all of which set conditions your data must meet:\n\n+ `verify()`: This function checks whether a given logical condition holds true for the entire dataset. If not, it halts the execution and throws an error.\n+ `assert()`: This function applies a specific predicate function to selected columns in your data frame. The data passes validation only if all values in those columns satisfy the predicate function's condition.\n+ `insist()`: Similar to `assert()`, this function allows for specifying a proportion or number of values that must meet the predicate function condition.\n+ `chain()`: This function is used when you want to specify more than one predicate function in the same `assert()` or `insist()` call. The data passes validation only if all predicates are met.\n\nThe syntax of the package integrates smoothly into a typical `dplyr` pipeline. Here's a brief example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(assertr)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\ndata(mtcars)\n\nmtcars %>%\n  tibble::rownames_to_column() %>%\n  verify(nrow(.) > 0) %>% # <1>\n  assert(in_set(0, 1), vs) %>% # <2>\n  insist(within_n_sds(2), mpg) # <3>\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: assertr stopped execution\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nColumn 'mpg' violates assertion 'within_n_sds(2)' 2 times\n    verb redux_fn       predicate column index value\n1 insist       NA within_n_sds(2)    mpg    18  32.4\n2 insist       NA within_n_sds(2)    mpg    20  33.9\n```\n:::\n:::\n\n\n1. Verify dataset isn't empty.\n2. Assert that specified Engine Types are present in row names.\n3. Ensure that at least one 'mpg' value is within two standard deviations.\n\nIn this example, `verify()` ensures `mtcars` has more than one row. `assert()` checks for the presence of certain row names, and `insist()` ensures at least one `mpg` value lies within two standard deviations. If any check fails, the pipeline stops and throws an error.\n\n\"Helper\" functions in `assertr` are predicate functions that return a logical true or false. These are used in conjunction with `assert()`, `insist()`, or `verify()`. Examples of helper functions include `within_bounds()`, `not_na()`, `is.numeric()`, `in_set()`, etc. You can also create and use your own predicate functions if needed.\n\nReplace your in-console data check with assertions, and if you're not already conducting data checks, start now.\n\n### Precise Validation with Pointblank\n\nThe `pointblank` package in R is specifically tailored for data validation. It's designed with features to make data validation more reliable, better documented, interactive, and adaptable to various scenarios. Its key features include:\n\n- **Assertion functions**: These functions allow setting quality standards for your data and halting execution if these standards are not met. They can check data types, value ranges, set memberships, distribution properties, etc.\n- **Informative interruptions**: Pointblank provides detailed error messages when data issues arise, causing a halt in the R process.\n- **Report generation**: A unique feature of Pointblank is that it creates comprehensive reports about the data validation process and its results.\n- **Integration with `dplyr` and `tidyverse`**: Pointblank complements the `tidyverse` suite of packages, especially `dplyr`, making it easy to apply data validation alongside data manipulation and visualization tools.\n- **Agent objects for ongoing validation**: The concept of 'agent' objects is introduced for continuous data validation. An agent can hold various types of validation checks and be reused across different datasets.\n\nPointblank has a plethora of functionality built into it and is a great fit for important projects as it lets you create validation pipelines, HTML reports, and even distribute the reports to stakeholders. Below, we'll create an agent and investigate the `mtcars` dataset. It's worth noting that you're not required to create an agent - you can use the functions similarly to `assertr`.\n\n![[point blank workflow](https://github.com/rich-iannone/pointblank)](images/pointblank_pipeline.png)\n\n#### Step 1: Create a Validation Plan (an Agent)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pointblank)\n\nagent <- create_agent(\n  tbl_name = \"a simple mtcars data validation\",\n  label = \"an example of using pointblank for data validation\",\n  tbl = mtcars # attach the data frame to validate\n)\n```\n:::\n\n\n\n#### Step 2: Specify Checks\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nagent <- agent %>%\n  col_vals_gt(vars(mpg), value = 10) %>% # <1>\n  col_vals_lte(vars(hp), value = 335) %>% # <2>\n  col_exists(vars(vs, am)) %>% # <3>\n  col_vals_not_null(vars(cyl, gear)) # <4>\n```\n:::\n\n\n1. Check if 'mpg' values are greater than 10.\n2. Check if 'hp' values are less than or equal to 335.\n3. Check if 'vs' and 'am' columns exist.\n4. Check if 'cyl' and 'gear' columns have no missing values.\n\n#### Step 3: Execute Checks\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninterrogate(agent)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: HTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\nHTML tags found, and they will be removed.\n* Set `options(gt.html_tag_check = FALSE)` to disable this check.\n```\n:::\n\n::: {.cell-output-display}\n\\setlength{\\LTpost}{0mm}\n\\begin{longtable}{lrlllccrrrcccc}\n\\caption*{\n{\\large Pointblank Validation} \\\\ \n{\\small an example of using pointblank for data validation}\n} \\\\ \n\\toprule\n &  & STEP & COLUMNS & VALUES & TBL & EVAL & UNITS & PASS & FAIL & W & S & N & EXT \\\\ \n\\midrule\n & 1 &  &  &  &                                                              & ✓ & <code>$32$</code> & <code>$32$</code><br><code>$1.00$</code> & <code>$0$</code><br><code>$0.00$</code> & --- & --- & --- & --- \\\\ \n & 2 &  &  &  &                                                              & ✓ & <code>$32$</code> & <code>$32$</code><br><code>$1.00$</code> & <code>$0$</code><br><code>$0.00$</code> & --- & --- & --- & --- \\\\ \n & 3 &  &  & — &                                                              & ✓ & <code>$1$</code> & <code>$1$</code><br><code>$1.00$</code> & <code>$0$</code><br><code>$0.00$</code> & --- & --- & --- & --- \\\\ \n & 4 &  &  & — &                                                              & ✓ & <code>$1$</code> & <code>$1$</code><br><code>$1.00$</code> & <code>$0$</code><br><code>$0.00$</code> & --- & --- & --- & --- \\\\ \n & 5 &  &  & — &                                                              & ✓ & <code>$32$</code> & <code>$32$</code><br><code>$1.00$</code> & <code>$0$</code><br><code>$0.00$</code> & --- & --- & --- & --- \\\\ \n & 6 &  &  & — &                                                              & ✓ & <code>$32$</code> & <code>$32$</code><br><code>$1.00$</code> & <code>$0$</code><br><code>$0.00$</code> & --- & --- & --- & --- \\\\ \n\\bottomrule\n\\end{longtable}\n\\begin{minipage}{\\linewidth}\n2023-12-08 19:07:24 PST\n\\textless{} 1 s\n2023-12-08 19:07:24 PST\\\\\n\\end{minipage}\n:::\n:::\n",
    "supporting": [
      "data_validation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{\"knit_meta_id\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"unnamed-chunk-5\",\"unnamed-chunk-5\",\"unnamed-chunk-5\"]}},\"value\":[{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"booktabs\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"caption\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"longtable\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]}]}"
      ]
    },
    "preserve": null,
    "postProcess": true
  }
}