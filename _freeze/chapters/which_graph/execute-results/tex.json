{
  "hash": "8a9591308846984c9205cfa5363dc571",
  "result": {
    "markdown": "---\ntitle: \"A Graph for The Job\"\neditor: visual\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n---\n\n\n\n\n\nWhen working on graphs don't think \"what chart should I use?\", but \"what am I trying to show?\" In this section we will look at different types of chart, what they show and when to use them. We will not cover all the graphs, but you will definitely expand your kit!\n\n## Category Comparison\n\nGraphs for category comparison are a type of data visualization that are used to compare and contrast different categories or groups. The most common of them is bar chart! The one below shows the top 5 countries by GDP per Capita in 1997. You can easily see that Norway is first and Switzerland is 5th!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>%\n  filter(year == 1997) %>%\n  slice_max(gdpPercap, n = 5) %>%\n  ggplot(aes(x = fct_reorder(country, gdpPercap, .desc = T), y = gdpPercap)) +\n  geom_col(fill = \"steelblue\") +\n  theme_minimal(base_size = 18) +\n  labs(x = NULL, y = NULL, title = \"Top 5 countries by GDP per Capita in 1997\") +\n  geom_text(aes(label = round(gdpPercap, 0)), vjust = 10, color = \"white\", size = 5) +\n  theme(panel.grid = element_blank(), axis.text.y = element_blank())\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-2-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nVertical bar charts are great to provide a quick comparison for a small number of categories (less than 7). But if need to show ranking of more things, flip the axis of the bar chart! Additional bonus, horizontal bar charts are great if you have long names to display. Below are the results of the 2021 London election. British YouTuber Niko Omilana finished 5th *for the memes*! Max Fosh, another YouTuber, also passed the cut off!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarh_data <- tibble(\n  Candidate = c(\n    \"Sadiq Khan\", \"Shaun Bailey\", \"SiÃ¢n Berry\",\n    \"Luisa Porritt\", \"Niko Omilana\", \"Laurence Fox\", \"Brian Rose\",\n    \"Richard Hewison\", \"Count Binface\", \"Mandu Reid\", \"Piers Corbyn\",\n    \"Vanessa Hudson\", \"Peter Gammons\", \"Farah London\", \"David Kurten\",\n    \"Nims Obunge\", \"Steve Kelleher\", \"Kam Balayev\", \"Max Fosh\", \"Valerie Brown\"\n  ),\n  Percentage = c(\n    40.0, 35.3, 7.8, 4.4, 2.0, 1.9,\n    1.2, 1.1, 1.0, 0.8, 0.8, 0.7, 0.6, 0.5, 0.4,\n    0.4, 0.3, 0.3, 0.2, 0.2\n  )\n) %>% mutate(is.youtuber = case_when(\n  Candidate == \"Niko Omilana\" ~ 1,\n  Candidate == \"Max Fosh\" ~ 2,\n  T ~ 0\n))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbarh_data %>%\n  ggplot(aes(x = fct_reorder(Candidate, Percentage), y = Percentage, fill = as.factor(is.youtuber))) +\n  geom_col() +\n  theme_minimal(base_size = 16) +\n  coord_flip() +\n  labs(x = NULL, y = NULL, title = \"London Mayor Elections (2021) by % of Votes\") +\n  theme(panel.grid = element_blank(), legend.position = \"none\", plot.caption.position = \"plot\") +\n  scale_y_discrete(expand = c(0, 0, 0, 3)) +\n  geom_text(aes(label = Percentage), nudge_y = 0.3, hjust = \"left\") +\n  scale_fill_manual(values = c(\"#c0bfff\", \"#f3e408\", \"#D96161\"))\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-3-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Lolipop Chart\n\nThe lollipop chart is a personal favorite, particularly when compared to traditional bar plots. Its distinct advantage lies in its ability to effectively convey the position of the final data point in a two-dimensional space. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarh_data %>%\n  ggplot(aes(x = fct_reorder(Candidate, Percentage), y = Percentage, color = as.factor(is.youtuber))) +\n  geom_segment(aes(x = fct_reorder(Candidate, Percentage),\n                   xend= fct_reorder(Candidate, Percentage),\n                   y = 0,\n                   yend = Percentage\n                   )) +\n  geom_point() +\n  theme_minimal(base_size = 16) +\n  coord_flip(clip = \"off\") +\n  labs(x = NULL, y = NULL, title = \"London Mayor Elections (2021) by % of Votes\") +\n  theme(panel.grid = element_blank(), legend.position = \"none\", plot.caption.position = \"plot\") +\n  scale_y_discrete(expand = c(0, 0, 0, 3)) +\n  geom_text(aes(label = Percentage), color = 'black', nudge_y = 0.4, hjust = \"left\") +\n  scale_color_manual(values = c(\"#c0bfff\", \"#f3e408\", \"#D96161\"))\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-4-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n### Bullet Graph\n\nThe bullet graph is a powerful tool designed for comparing performance against a predefined target zone. Let's test it with visualizing Net Promoter Score (NPS). The bullet graph clearly shows the target, various performance levels, and where our results stand in relation to the goal.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_col(\n    aes(x = \"NPS\", y = 200),\n    fill = \"#A9A9A9\",\n    width = 0.6,\n    alpha = 0.9\n  )  +\n  geom_col(\n    aes(x = \"NPS\", y = 170),\n    fill = \"#808080\",\n    width = 0.6,\n    alpha = 0.9\n  ) +\n  geom_col(\n    aes(x = \"NPS\", y = 130),\n    fill = \"#696969\",\n    width = 0.6,\n    alpha = 0.9\n  ) +\n  geom_col(\n    aes(x = \"NPS\", y = 180),\n    fill = \"black\",\n    color = NA,\n    width = 0.2\n  ) +\n  geom_errorbar(\n    aes(x = \"NPS\", ymin = 160, ymax = 160),\n    color = \"red\",\n    width = 0.45,\n    size = 2\n  ) +\n  coord_flip() +\n  theme_minimal() +\n  labs(\n    x = element_blank(),\n    y = element_blank(),\n    title = \"Net Promoter Score for 2023\",\n    subtitle = \"We beat the Target!\"\n  ) +\n  theme(\n    panel.grid = element_blank(),\n    axis.text = element_text(face = \"bold\")\n  ) +\n  annotate(\n    \"text\",\n    x = c(rep((1 + .45), 3),0.55),\n    y = c(\n      130 * 0.5,\n      130 + (170 - 130) * 0.5,\n      170+(200-170)*0.5 ,\n      160\n    ),\n    label = c(\"Poor\", \"Good\", \"Great\", \"Target\"),\n    color = c(rep(\"black\", 3), \"red\")\n  ) +\n  ylim(c(-100,100)) +\n  scale_y_continuous(breaks = seq(0, 200, 10), labels = seq(-100,100,10)) +\n  \n  NULL\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-5-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n## Distribution\n\n### Histogram\n\nWhat if you want to show the distribution of the data? We can use a variation of a bar chart -- histogram! Histograms show the distribution of continuous data by grouping it into bins and displaying the frequency or proportion of observations that fall into each bin. They are great if you want to show the shape of the distribution, but they are very sensitive to the bins you choose. Notice how the shape of the distribution changes for each number of bins. It is important to strike a balance between too few and too many. 6 bins makes our distribution look pretty normal while 30 bins make it all over the place. 15 bins seems about right it preserves the bimodal feature of the distribution, while keeping the picture legible.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase <- iris %>% ggplot(aes(x = Sepal.Length)) +\n  theme_minimal() +\n  theme(panel.grid = element_blank(), axis.text.y = element_blank()) +\n  coord_cartesian(expand = FALSE, clip = \"off\") +\n  labs(y = NULL, x = NULL)\nhist_1 <- base + geom_histogram(fill = \"steelblue\", color = \"white\", bins = 6) + labs(subtitle = \"6 bins\")\nhist_2 <- base + geom_histogram(fill = \"steelblue\", color = \"white\", bins = 15) + labs(subtitle = \"15 bins\")\nhist_3 <- base + geom_histogram(fill = \"steelblue\", color = \"white\", bins = 30) + labs(subtitle = \"30 bins\")\n\n(hist_1 + hist_2 + hist_3) + plot_annotation(title = \"iris Sepal Length Distribution Histograms with Varying Bins\")\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-6-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Density Plot\n\nUnlike histograms, density plots use a continuous line to represent the data instead of bars. This smooth curve provides a more detailed and nuanced representation of the distribution of the data, allowing for easier detection of patterns and trends. The density plot constructs this line by placing many small normal distributions at each point in the data, which are then used to weigh all points within their respective range and draw a curve connecting them. The width of these curves is controlled by the bandwidth of the density plot, which determines how wide the curves span. A larger bandwidth will consider more points, resulting in a smoother curve, while a smaller bandwidth will lead to a jagged line.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase <- iris %>% ggplot(aes(x = Sepal.Length)) +\n  theme_minimal() +\n  theme(panel.grid = element_blank(), axis.text.y = element_blank()) +\n  coord_cartesian(expand = FALSE, clip = \"off\") +\n  labs(y = NULL, x = NULL)\ndens_1 <- base + geom_density(color = \"steelblue\", linewidth = 2, bw = 0.3) + labs(subtitle = \"Band Width 0.3\")\ndens_2 <- base + geom_density(color = \"steelblue\", linewidth = 2, bw = 0.1) + labs(subtitle = \"Band Width 0.1\")\ndens_3 <- base + geom_density(color = \"steelblue\", linewidth = 1, bw = 0.03) + labs(subtitle = \"Band Width 0.03\")\n\n(dens_1 + dens_2 + dens_3) + plot_annotation(title = \"iris Sepal Length Distribution Density Plots with Varying Band Widths\")\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-7-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Frequency Polygon\n\nIt is similar to a histogram, but instead of bars, it uses a continuous line to connect the points representing the frequencies. Frequency polygons are particularly useful when comparing two or more data sets on the same plot. Just like histogram it relies on the selection of bins.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfreq_1 <- base + geom_histogram(fill = \"grey\", color = \"white\", bins = 15, alpha = 0.5) + geom_freqpoly(color = \"steelblue\", bins = 15, linewidth = 1.5) + labs(subtitle = \"15 bins\")\n\nfreq_2 <- iris %>% ggplot(aes(x = Sepal.Length)) +\n  geom_histogram(aes(fill = Species), position = \"dodge\", color = \"white\", bins = 15, alpha = 0.3) +\n  geom_freqpoly(aes(color = Species), bins = 15, linewidth = 1.5) +\n  labs(subtitle = \"15 bins\") +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(), axis.text.y = element_blank(),\n    legend.position = c(.95, .95),\n    legend.justification = c(\"right\", \"top\"),\n    legend.box.just = \"right\",\n    legend.margin = margin(6, 6, 6, 6)\n  ) +\n  coord_cartesian(expand = FALSE, clip = \"off\") +\n  labs(y = NULL, x = NULL)\n\nfreq_1 + freq_2\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-8-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Box Plot\n\n<!-- This section was inspired by https://www.cedricscherer.com/2021/06/06/visualizing-distributions-with-raincloud-plots-and-how-to-create-them-with-ggplot2/ -->\n\nBoxplots provide a summary of the distribution of a dataset, show the median, the lower and upper quartiles, and the minimum and maximum values of a dataset. The box in the middle represents the interquartile range (IQR), which is the range of the middle 50% of the data. The line in the box represents the median, which is the midpoint of the data. The whiskers on the top and bottom extend to the minimum and maximum values, excluding outliers. It is incredible how much information boxplots contain! With just one plot, you can quickly identify outliers and gain a visual understanding of the distribution of the data.\n\nIn the context of the iris dataset, the boxplot of Sepal Length across different species provides a clear picture of the distribution of this variable. However, like real boxes, boxplots can also hide important information. To illustrate this point, we can use a dataset with the same summary statistics but different distributions. In the second graph, three identical boxplots are displayed. However, once we add data points to the plot, it becomes evident that the distributions are quite different.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1337)\n\ndata_dist <- tibble(\n  group = factor(c(rep(\"Group 1\", 100), rep(\"Group 2\", 250), rep(\"Group 3\", 25))),\n  value = c(\n    seq(0, 20, length.out = 100),\n    c(rep(0, 5), rnorm(30, 2, .1), rnorm(90, 5.4, .1), rnorm(90, 14.6, .1), rnorm(30, 18, .1), rep(20, 5)),\n    rep(seq(0, 20, length.out = 5), 5)\n  )\n) %>%\n  rowwise() %>%\n  mutate(value = if_else(group == \"Group 2\", value + rnorm(1, 0, .4), value))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbase2 <- iris %>% ggplot(aes(y = Sepal.Length, x = Species)) +\n  theme_minimal() +\n  theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank()) +\n  coord_cartesian(expand = FALSE, clip = \"off\") +\n  labs(y = NULL, x = NULL)\nbox_1 <- base2 + geom_boxplot()\n\nbase_dist <- data_dist %>% ggplot(aes(y = value, x = group)) +\n  theme_minimal() +\n  theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank()) +\n  coord_cartesian(expand = FALSE, clip = \"off\") +\n  labs(y = NULL, x = NULL)\nbox_2 <- base_dist + geom_boxplot()\nbox_3 <- base_dist + geom_boxplot() + geom_point(color = \"orange\", size = 1.5, alpha = 0.25, position = position_jitter(width = 0.1))\n\nbox_1 + box_2 + box_3\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-10-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Violin Plot\n\nOne solution is to use violin plots. In its essence it is a vertical density plot. Look how much more we know about out data distribution of iris species! We can see the density distribution, points and quantiles!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase2 + geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), bw = 0.15) + geom_jitter(alpha = 0.2, position = position_jitter(width = 0.1))\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-11-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nGoing back to our new data set, notice how different the datasets look, clearly there are some patterns. Group 1, which has four times more observations, appears to be nearly identical to Group 3. This is because the default setting \"scale =\"area\"\" is a little misleading. We can fix that by changing it to \"scale =\"count\"\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist_1 <- base_dist + geom_violin(scale = \"area\") + labs(subtitle = \"scale = 'area'\")\ndist_2 <- base_dist + geom_violin(scale = \"count\") + labs(subtitle = \"scale = 'count'\")\ndist_1 + dist_2\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-12-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nDo you remember how band width is extremely important when making density plots? Setting an apprpriate band width reveals the true distribution!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_dist + geom_violin(scale = \"count\", bw = .3, color = NA, fill = \"steelblue\")\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-13-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Bee Hive Plot\n\nThe bee hive plot is a scatter plot that arranges data points as dots to minimize overlap. It's ideal for visualizing small datasets because it creates patterns like a density plot without hiding individual data points.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbee_1 <- base2 + geom_beeswarm()\nbee_2 <- base_dist + geom_beeswarm()\nbee_1 + bee_2\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-14-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nAll of the plots we have covered so far have their advantages: 1. Box plot shows important statistics 2. Density plot provides high-level view of data shape 3. Bee hive plot \"shows\" the actual datapoints While combining these plots might make for a crowded visual, with some modifications, it's possible to create a hybrid plot that captures the strengths of each.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_dist + geom_violin(fill = \"steelblue\", alpha = .4, scale = \"count\", bw = .4) + geom_boxplot(fill = NA, width = .1) + geom_beeswarm(color = \"orange\", alpha = .8, cex = 1)\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-15-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Margins\n\nMarginal histograms are a method for visualizing data distributions in relation to two variables. In this visualization, a histogram for each variable is positioned on the scatterplot's edges. This allows us to examine both the individual distributions of each variable and the relationship between the two.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggExtra) # <1>\n\np <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +  # <2>\n  geom_point(aes(color = Species)) + # <3>\n  theme_minimal()+ # <4>\n  theme(legend.position = \"bottom\", legend.title = element_blank()) # <5>\n\np_marginal <- ggMarginal(p, type = \"density\", groupFill = TRUE) # <6>\n\np_marginal # <7>\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-16-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n1. Load the `ggExtra` package, which provides functions to enhance `ggplot2` plots, such as adding marginal histograms.\n2. Create a base scatter plot of Sepal Length against Sepal Width using the `ggplot` function from the `ggplot2` package. The `aes` function is used to specify the x and y variables.\n3. Add points to the scatter plot using the `geom_point` function, with color representing different Species.\n4. Apply a minimal theme to the plot using the `theme_minimal` function, which removes most non-data ink from the plot.\n5. Adjust the legend position to the bottom and remove the legend title using the `theme` function.\n6. Add marginal histograms to the scatter plot using the `ggMarginal` function, and set the `type` argument to `\"density\"` to create density plots instead of histograms. The `groupFill` argument is set to TRUE to fill the densities with different colors based on group (Species).\n7. Display the plot.\n\n\n### Rain Cloud Plot\n\nRain Cloud Plot combines elements of box plots, violin plots, and density plots. It uses a density plot to show the distribution of the data, a box plot to display the statistics, and individual data points are represented as rain drops. The result is a visually appealing and informative way to visualize a large number of distributions side-by-side, allowing for easy comparisons and identification of patterns.\n\nIsn't this beautiful? We have a box plot, density plot, and jittered points all in the same graph without looking cluttered.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_dist +\n  ggdist::stat_halfeye(\n    adjust = .3, # bw\n    width = .6,\n    .width = 0,\n    justification = -.2,\n    point_colour = NA\n  ) +\n  geom_boxplot(\n    width = .15,\n    outlier.shape = NA\n  ) +\n  ## add justified jitter from the {gghalves} package\n  gghalves::geom_half_point(\n    ## draw jitter on the left\n    side = \"l\",\n    ## control range of jitter\n    range_scale = .4,\n    ## add some transparency\n    alpha = .3\n  ) +\n  coord_cartesian(xlim = c(1.2, NA), clip = \"off\")\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-17-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nOne alternative option to the boxplot is to stack the data points and use a minimal boxplot representation. While this alternative can be visually appealing, it is important to ensure that your audience understands the visualization and the meaning behind the stacked data points. It may be necessary to provide additional context or include a note explaining the meaning of the stacked slabs to avoid confusion.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_dist +\n  ggdist::stat_halfeye(\n    adjust = .3,\n    width = .6,\n    ## set slab interval to show IQR and 95% data range\n    .width = c(.5, .95)\n  ) +\n  ggdist::stat_dots(\n    side = \"left\",\n    dotsize = .8,\n    justification = 1.05,\n    binwidth = .3\n  ) +\n  coord_cartesian(xlim = c(1.2, NA))\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-18-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nMy personal favorite is the rain cloud plot, which combines vertical lines and a bar plot that is rotated horizontally to resemble actual rain clouds.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_dist +\n  ggdist::stat_halfeye(\n    adjust = .3,\n    width = .6,\n    .width = 0,\n    justification = -.2,\n    point_colour = NA\n  ) +\n  geom_boxplot(\n    width = .15,\n    outlier.shape = NA\n  ) +\n  geom_half_point(\n    ## draw horizontal lines instead of points\n    shape = \"|\",\n    side = \"l\",\n    size = 5,\n    alpha = .2,\n    transformation = position_identity()\n  ) +\n  coord_cartesian(xlim = c(1.2, NA), clip = \"off\") + coord_flip()\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-19-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Proportions\n\nAnother big collection of graphs is concerned with communicating proportions and composition.\n\n### Stacked Bar Charts\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_spending <- read_csv(\"data/USFR_StmtNetCost_2017_2022.csv\") %>%\n  janitor::clean_names() %>%\n  filter((restatement_flag == \"N\") & (agency_name != \"Total\")) %>%\n  select(year = statement_fiscal_year, agency_name, net_cost_in_billions) %>%\n  mutate(net_cost_in_billions = as.numeric(net_cost_in_billions)) %>%\n  group_by(year) %>%\n  mutate(proportion = round(net_cost_in_billions / sum(net_cost_in_billions), 2)) %>%\n  ungroup()\n\nspending_plot_data <- us_spending %>%\n  group_by(year) %>%\n  mutate(rank = rank(-1 * net_cost_in_billions), agency = ifelse(rank >= 5, \"Other\", agency_name)) %>%\n  count(year, agency, wt = net_cost_in_billions) %>%\n  mutate(other = agency == \"Other\") %>%\n  group_by(other) %>%\n  arrange(desc(n), .by_group = T) %>%\n  ungroup() %>%\n  mutate(order = -1 * row_number()) %>%\n  mutate(agency = recode(agency,\n    \"Department of Veterans Affairs\" = \"Veterans Affairs\",\n    \"Department of Health and Human Services\" = \"HHS\",\n    \"Department of Defense\" = \"Defense\",\n    \"Social Security Administration\" = \"SSA\",\n    \"Department of the Treasury\" = \"Treasury\",\n    \"Interest on Treasury Securities Held by the Public\" = \"i on Treasuries\"\n  )) %>%\n  mutate(agency = factor(agency, c(\"Other\", \"i on Treasuries\", \"Veterans Affairs\", \"Defense\", \"Treasury\", \"SSA\", \"HHS\")))\n```\n:::\n\n\n\nA stacked bar chart is a type of graph used to visualize the distribution of a categorical variable. It is similar to a regular bar chart, but in a stacked bar chart, each bar is divided into sections, with each section representing a different category within the variable. The height of each section corresponds to the proportion or frequency of the category within that bar. Stacked bar charts are particularly useful when comparing the distribution of a variable across different subgroups or time periods, as they allow for easy visualization of both the overall distribution as well as the relative proportions of each subgroup or category within the variable.\n\nAs an example we will use US Expernditures across departments. Only top four departments are shown, the rest are collected into \"other\". The graph below shows absolute values and its components across years.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspending_plot_data %>%\n  ggplot(aes(x = year, y = n, fill = agency, label = agency)) +\n  geom_col(position = \"stack\", show.legend = F) +\n  scale_fill_manual(values = c(\"#5E5E5E\", \"#EF3B2C\", \"#2CA25F\", \"#006837\", \"#F7DC6F\", \"#00FFFF\", \"#FFC0CB\")) +\n  theme_minimal() +\n  theme(legend.position = \"right\") +\n  labs(y = \"Millions Spent\") +\n  geom_label(size = 3, aes(group = agency), position = position_stack(vjust = 0.5), fill = \"white\", alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-21-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nWhat if we are not concerned with absolute values, but relative proportions? We can use percentage stacked chart.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspending_plot_data %>%\n  ggplot(aes(x = year, y = n, fill = agency)) +\n  geom_col(position = \"fill\", show.legend = T) +\n  scale_fill_manual(\n    values = c(\"#5E5E5E\", \"#EF3B2C\", \"#2CA25F\", \"#006837\", \"#F7DC6F\", \"#00FFFF\", \"#FFC0CB\")\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"none\") +\n  labs(y = \"Millions Spent\", fill = \"Department\") +\n  geom_label(aes(x = year, y = n, label = agency, group = agency), size = 3, position = position_fill(vjust = 0.5), fill = \"white\", alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-22-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nStacked charts are useful for visualizing the distribution of categorical variables, but they can be challenging to compare categories in the middle. Typically, the easiest categories to compare are the ones at the top and bottom of the stack. For example, suppose we want to compare the trend of the Department of Defense and the Social Security Administration (SSA) over time. In this case, we can move these categories to the top and bottom positions of the stacked chart to make it easier to compare their relative sizes and trends.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspending_plot_data %>%\n  mutate(agency = factor(agency, c(\"Defense\", \"Other\", \"i on Treasuries\", \"Veterans Affairs\", \"Treasury\", \"HHS\", \"SSA\"))) %>%\n  ggplot(aes(x = year, y = n, fill = agency)) +\n  geom_col(position = \"fill\", show.legend = T) +\n  scale_fill_manual(\n    values = c(\"#006837\", \"#5E5E5E\", \"#EF3B2C\", \"#2CA25F\", \"#F7DC6F\", \"#FFC0CB\", \"#00FFFF\")\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"none\") +\n  labs(y = \"Millions Spent\", fill = \"Department\") +\n  geom_label(aes(x = year, y = n, label = agency, group = agency), size = 3, position = position_fill(vjust = 0.5), fill = \"white\", alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-23-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Pie Chart\n\ndata used from: The Growth Lab at Harvard University. The Atlas of Economic Complexity. http://www.atlas.cid.harvard.edu.\n\nAs an example dataset we will be used Japan's export basket from 2020.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\njapan_export <- read_csv(\"data/japan_export_2020.csv\") %>%\n  rename(\"export\" = `Gross Export`) %>%\n  janitor::clean_names()\n\njapan_sectors <- japan_export %>% count(sector, wt = share)\n```\n:::\n\n\n\nPie charts are a variation of bar charts where each category is represented as a slice of a circle. While pie charts can effectively communicate when one category is significantly larger or smaller than the others, they become difficult to read and compare accurately when there are many categories or the differences between them are small. Comparing angles and areas of the slices can be confusing, leading to misinterpretation of the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npie_1 <- japan_sectors %>%\n  ggplot(aes(x = \"\", y = n, fill = sector)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  theme_void() +\n  theme(legend.position = \"none\")\n\npie_2 <- japan_sectors %>%\n  ggplot(aes(x = \"\", y = n, fill = sector)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  coord_polar(\"y\", start = 0) +\n  theme(panel.background = element_rect(fill = \"white\"))\n\npie_1 + pie_2\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-25-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nBut if absolutely must use a pie chart here are some rules to keep in mind: 1. Limit the number of categories to 5-7 at most. 2. Consider grouping small categories into an \"Other\" category to avoid clutter. 3. Arrange the slices in decreasing order of size, starting at 12 o'clock to aid in comparing them. 4. Include the category labels directly on the chart instead of relying solely on a legend. 5. Add separators between slices to help with distinguishing between them. However, keep in mind that this can also add visual clutter, so use with discretion.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\njapan_sectors %>%\n  mutate(sector = ifelse(n < 11, \"Other\", sector)) %>%\n  count(sector, wt = n) %>%\n  mutate(other = sector == \"Other\") %>%\n  group_by(other) %>%\n  arrange(desc(n), .by_group = T) %>%\n  ungroup() %>%\n  mutate(prop = n / sum(japan_sectors$n) * 100) %>%\n  mutate(ypos = cumsum(prop) - 0.5 * prop) %>%\n  mutate(order = -1 * row_number()) %>%\n  ggplot(aes(x = \"\", y = n, fill = fct_reorder(sector, order))) +\n  geom_bar(\n    stat = \"identity\", width = 1, color =\n      \"white\"\n  ) +\n  coord_polar(\"y\", start = 0) +\n  theme_void() +\n  theme(legend.position = \"none\") +\n  geom_text(aes(y = ypos, label = sector), color = c(\"white\", \"#333333\", rep(\"white\", 4)), size = 6) +\n  scale_fill_manual(values = c(\"grey\", \"#009E73\", \"#D55E00\", \"#CC79A7\", \"#F0E442\", \"#56B4E9\"))\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-26-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Waffle Chart\n\nOne alternative to a pie chart could be a waffle chart (these food names make me hungry). It is a grid-like visualization that resembles a waffle or a checkerboard. Each square in the grid represents a proportion of the total data, making it a useful way to visualize proportions or percentages in a visually appealing way. However, they are also vulnerable to large numbers of categories. But what they are truly great at is giving the sense of proportions and sizes. Waffle chart will significantly benefit from interactivity.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# waffle_data <- waffle_iron(iris, aes_d(group = Species))\n#\n# ggplot(waffle_data, aes(x, y, fill = group)) +\n#   geom_waffle() +\n#   coord_equal() +\n#   scale_fill_viridis_d() +\n#   theme_waffle() +\n#   theme(legend.position = \"top\", legend.title = element_blank()) +\n#   labs(x = element_blank(), y = element_blank())\n\njapan_sectors %>%\n  # mutate(sector = ifelse(n<11,\"Other\",sector)) %>%\n  # count(sector, wt = n) %>%\n  # mutate(other = sector == \"Other\") %>%\n  # group_by(other) %>%\n  # arrange(desc(n),.by_group = T) %>%\n  # ungroup() %>%\n  mutate(other = sector == \"Other\") %>%\n  uncount(weights = round(n, 0)) %>%\n  group_by(other) %>%\n  arrange(desc(n), .by_group = T) %>%\n  ungroup() %>%\n  waffle_iron(aes_d(group = sector)) %>%\n  ggplot(aes(x, y, fill = group)) +\n  geom_waffle() +\n  coord_equal() +\n  # scale_fill_viridis_d() +\n  theme_waffle() +\n  theme(legend.position = \"top\", legend.title = element_blank()) +\n  labs(x = element_blank(), y = element_blank()) +\n  scale_fill_manual(values = c(\"#CF8F00\", \"#E52B50\", \"#003366\", \"#228B22\", \"#1E90FF\", \"#FFD700\", \"#666666\", \"#800000\", \"#9932CC\", \"#8B0000\", \"#FFA07A\"))\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-27-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Tree Maps\n\nWhat if we have a lot of data hierarchical data? Treemaps!\n\nTreemaps are a type of visualization that allows you to display hierarchical data in a way that is easy to understand. Each node in the hierarchy is represented by a rectangle, and the size of the rectangle corresponds to the proportion of the total data. The nodes are organized in a way that preserves the hierarchy, with parent nodes containing smaller child nodes. This allows you to quickly identify which nodes are the largest and which are the smallest, as well as the relationships between them. Tree maps are especially useful for displaying large amounts of data in a compact and intuitive way. Tree maps can become very cluttered and interactivity is almost always necessary for such detailed plots. Check out the same plot [from the source website](https://atlas.cid.harvard.edu/countries/114/export-basket).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(treemap)\ntreemap(japan_export,\n  index = c(\"sector\", \"name\"),\n  vSize = \"export\",\n  type = \"index\",\n  fontsize.labels = c(14, 10),\n  fontcolor.labels = c(\"black\", \"white\"),\n  fontface.labels = c(2, 1),\n  bg.labels = 0,\n  align.labels = list(\n    c(\"center\", \"center\"),\n    c(\"left\", \"top\")\n  ),\n  border.col = c(\"black\", \"white\"),\n  border.lwds = c(3, 1),\n  title = \"Japans Export in 2020\",\n  fontsize.title = 14\n)\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-28-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Correlation\n\nIn addition to understanding the distribution of individual variables, it is important to examine the relationship between pairs of variables. Correlation plots are a useful tool for visualizing many aspects of data: relationships between variables (or lack there of), clustering, outliers, etc.\n\n### Scatter Plot\n\nThe most common visualization is scatter plot! It is not a secret for anyone that scatter plots are amazing and perhaps the most persuasive types of plot. We can add a fitted lines to the plot to better show the relationships between the variables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscatter_1 <- iris %>%\n  drop_na() %>%\n  ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +\n  geom_point(show.legend = F) +\n  geom_dl(aes(label = Species), method = \"smart.grid\") +\n  theme_minimal() +\n  labs(x = \"Sepal Length\", y = \"Sepal Width\")\n\nscatter_2 <- scatter_1 + geom_smooth(se = F, fullrange = F, show.legend = F, method = \"lm\", linewidth = 2) + theme(\n  axis.title.y = element_blank(),\n  axis.text.y = element_blank(),\n  axis.ticks.y = element_blank()\n)\n\nscatter_1 + scatter_2\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-29-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Correlograms\n\nCorrelograms serve as efficient tools to visualize the relationships within a dataset swiftly. They allow us to visualize correlations between all pairs of variables, offering valuable insights into the data. Understanding these correlations is critical during the analysis and exploration of multidimensional data. Several ways exist to structure correlograms, but we will present the most common one below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(GGally)\n\nGGally::ggpairs(\n  iris, # <1>\n  mapping = ggplot2::aes(color = Species), # <2>\n  progress = FALSE # <3>\n)\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-30-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n1. Select the dataset for which to create a correlogram, in this case, the iris dataset.\n2. Map the color of points to the Species variable.\n3. Disable the display of a progress bar during the plot's creation.\n\n\n## Change over Time\n\nWe have already seen plots that incorporate time change. Time series plots typically have time on the x-axis and the variable being measured on the y-axis. They can show trends, patterns, and seasonal fluctuations in the data.\n\n### Line Chart\n\nMost common\n\nS&P 500 stock market index since 1927. Historical data is inflation-adjusted using the headline CPI and each data point represents the month-end closing value.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp500 <- tribble(\n  ~Year, ~Average_Closing_Price, ~Year_Open, ~Year_High, ~Year_Low, ~Year_Close, ~Annual_Percent_Change,\n  2023, 4020.94, 3824.14, 4179.76, 3808.10, 3970.04, 3.40,\n  2022, 4097.49, 4796.56, 4796.56, 3577.03, 3839.50, -19.44,\n  2021, 4273.41, 3700.65, 4793.06, 3700.65, 4766.18, 26.89,\n  2020, 3217.86, 3257.85, 3756.07, 2237.40, 3756.07, 16.26,\n  2019, 2913.36, 2510.03, 3240.02, 2447.89, 3230.78, 28.88,\n  2018, 2746.21, 2695.81, 2930.75, 2351.10, 2506.85, -6.24,\n  2017, 2449.08, 2257.83, 2690.16, 2257.83, 2673.61, 19.42,\n  2016, 2094.65, 2012.66, 2271.72, 1829.08, 2238.83, 9.54,\n  2015, 2061.07, 2058.20, 2130.82, 1867.61, 2043.94, -0.73,\n  2014, 1931.38, 1831.98, 2090.57, 1741.89, 2058.90, 11.39,\n  2013, 1643.80, 1462.42, 1848.36, 1457.15, 1848.36, 29.60,\n  2012, 1379.61, 1277.06, 1465.77, 1277.06, 1426.19, 13.41,\n  2011, 1267.64, 1271.87, 1363.61, 1099.23, 1257.60, 0.00,\n  2010, 1139.97, 1132.99, 1259.78, 1022.58, 1257.64, 12.78,\n  2009, 948.05, 931.80, 1127.78, 676.53, 1115.10, 23.45,\n  2008, 1220.04, 1447.16, 1447.16, 752.44, 903.25, -38.49,\n  2007, 1477.18, 1416.60, 1565.15, 1374.12, 1468.36, 3.53,\n  2006, 1310.46, 1268.80, 1427.09, 1223.69, 1418.30, 13.62\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsp500_scatter <- sp500 %>%\n  select(-c(Average_Closing_Price, Year_Open, Annual_Percent_Change)) %>%\n  pivot_longer(-Year) %>%\n  mutate(year_close = name != \"Year_Close\") %>%\n  ggplot(aes(x = Year, y = value, color = name)) +\n  geom_point(size = 2) +\n  geom_dl(aes(label = name), method = \"smart.grid\") +\n  theme_minimal() +\n  theme(legend.position = \"none\") +\n  labs(x = element_blank(), y = \"S&P 500\")\n\nsp500_line <- sp500 %>%\n  select(-c(Average_Closing_Price, Year_Open, Annual_Percent_Change)) %>%\n  pivot_longer(-Year) %>%\n  mutate(year_close = name != \"Year_Close\") %>%\n  ggplot(aes(x = Year, y = value, color = name)) +\n  geom_line(aes(linetype = year_close), linewidth = 1.5) +\n  scale_color_manual(values = c(\"steelblue\", \"grey\", \"grey\")) +\n  geom_dl(aes(label = name), method = \"smart.grid\") +\n  theme_minimal() +\n  theme(legend.position = \"none\") +\n  labs(x = element_blank(), y = \"S&P 500\")\n\nsp500_scatter + sp500_line\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-32-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Waterfall Graph\n\nWaterfall charts, also known as bridge charts, are a type of bar chart used to visualize the cumulative effect of sequentially introduced positive or negative values. The graph is named \"waterfall\" because it resembles a series of falling water droplets. Each bar in the chart represents a value and is color-coded to indicate whether it contributes to an increase or decrease in the cumulative total. They are useful for visualizing the relative contributions of positive and negative factors that affect the net change in the value being analyzed.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwaterfall_data <- tribble(\n  ~year, ~bank, ~change,\n  2017, 2000, 2000,\n  2018, 1745, -255,\n  2019, 1930, 185,\n  2020, 2197, 267,\n  2021, 2453, 256,\n  2022, 2300, -153,\n) %>% transmute(as.character(year), change)\n\nlibrary(waterfalls)\n\nwaterfall(waterfall_data,\n  calc_total = TRUE,\n  total_rect_color = \"orange\",\n  total_rect_text_color = \"white\"\n) +\n  theme_minimal() +\n  theme(panel.grid = element_blank()) +\n  labs(y = \"Money in Bank\", x = NULL)\n```\n\n::: {.cell-output-display}\n![](which_graph_files/figure-pdf/unnamed-chunk-33-1.pdf){fig-pos='H'}\n:::\n:::\n",
    "supporting": [
      "which_graph_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": true
  }
}