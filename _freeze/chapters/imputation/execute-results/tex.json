{
  "hash": "9716b58fdac89ffaed11227eb6db5a81",
  "result": {
    "markdown": "---\ntitle: Imputation\nmessage: false\nwarning: false\n---\n\n::: {.cell}\n\n:::\n\n\n\nImputation is a statistical technique that fills in missing or incomplete data by estimating values from existing information, but its controversial nature arises from the introduction of artificial data, potentially impacting analysis outcomes as completed data is assigned more weight.\n\n## Types of Missing Data\n\nUnderstanding the type of missing data is crucial as it can guide the appropriate choice of imputation methods or handling strategies to minimize potential biases in the analysis.\n\n1.  **Missing Completely at Random (MCAR)**: The missingness in the data is entirely random, and the probability of missing data is the same for all observations, regardless of observed or unobserved values. MCAR is an ideal scenario, as missing data does not depend on any other variables in the dataset.\n\n2.  **Missing at Random (MAR)**: As mentioned earlier, MAR occurs when the missingness is related to observed variables in the dataset, but not to the unobserved values themselves. The probability of missing data depends on other observed variables but not on the unobserved values.\n\n3.  **Missing Not at Random (MNAR)**: In MNAR, the missingness is related to the unobserved values themselves. The probability of missing data depends on the values that are missing, leading to potential bias in the analysis.\n\n4.  **Missing by Design**: Missing by design occurs when specific data points are intentionally missing, often as part of the study design or data collection process. In such cases, the missing data is systematic and has a purpose.\n\nBefore addressing missing data, it is often essential to distinguish between different types of missingness. Explicitly marking missing data as NA in R helps in identifying the patterns and dealing with the missing values appropriately.\n\n## Dealing with Missing Data\n\nThere are several ways to handle missing data:\n\n1.  **Keep it**: In some cases, it might be appropriate to retain the missing data if the missingness does not significantly affect the analysis.\n\n2.  **Drop it (Listwise Deletion or Complete Case Analysis)**: This approach involves removing rows with missing data. It's simple and can be suitable if missing data is minimal and random. However, it can lead to information loss, potential bias, and reduced sample size. Despite these drawbacks, it's a common method in quantitative research due to its simplicity.\n\n3.  **Impute it**: Imputation involves estimating missing values based on observed data, which allows for a complete dataset and ensures that all cases are retained for analysis. However, if not done correctly will introduce bias.\n\n4.  **Set as Dummy or a Factor**: Sometimes, missing values can be treated as a separate category. This can be done by creating a dummy variable or converting the variable into a factor. This approach acknowledges the missing data and incorporates it into the analysis as a distinct group.\n\nImputation, while a powerful tool, must be applied judiciously as it modifies the original dataset and can substantially influence analysis outcomes. It's essential to comprehend the reasons behind the missing data, the assumptions involved, and the justification for using imputation in the specific context of your analysis. Imputation should never be a default choice, but a well-considered strategy.\n\n### Explicitly Handling Missing Data with `complete()`\n\nWhen working with datasets, it's crucial to understand that missing values aren't always explicitly identifiable. These implicit absences can misleadingly suggest data completeness, emphasizing the necessity for appropriate identification and handling. The `tidyr` package's `complete()` function offers a robust solution.\n\nThe `complete()` function generates a new dataframe featuring all potential combinations of specified columns, thereby assuring data comprehensiveness. This process, complemented by filling absent combinations with default values, facilitates precise analysis and mitigates the risk of implicit missing data.\n\nTake, for instance, a dataset tracking four students attending various classes over three days. Initially, this dataset might seem comprehensive. However, only the attending students were recorded, leaving a data gap for absentees.\n\nIn this case, we employ `complete()` to create `complete_df`, a new dataframe that encapsulates all conceivable combinations of `student_id`, `day`, and `class.` This method ensures accurate recording of each student's attendance for every class on each day, irrespective of the initial data's shortcomings. The \"present\" column's missing values default to `FALSE`, clearly denoting unrecorded attendance.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ndf <- tribble( # <1> \n  ~day, ~class, ~student_id, ~present,\n  1, \"English\", 1, T,\n  1, \"English\", 2, T,\n  1, \"English\", 4, T,\n  1, \"Science\", 2, T,\n  2, \"Math\", 1, T,\n  2, \"Math\", 2, T,\n  2, \"Math\", 4, T,\n  2, \"English\", 4, T,\n  2, \"English\", 1, T,\n  3, \"Math\", 1, T,\n  3, \"Math\", 2, T,\n  3, \"Math\", 1, T\n)\n```\n:::\n\n\n\n1.  `tribble()` is a function to create a data frame in a readable format\n\n\n\n::: {.cell .output}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 x 4\n     day class   student_id present\n   <dbl> <chr>        <dbl> <lgl>  \n 1     1 English          1 TRUE   \n 2     1 English          2 TRUE   \n 3     1 English          4 TRUE   \n 4     1 Science          2 TRUE   \n 5     2 Math             1 TRUE   \n 6     2 Math             2 TRUE   \n 7     2 Math             4 TRUE   \n 8     2 English          4 TRUE   \n 9     2 English          1 TRUE   \n10     3 Math             1 TRUE   \n11     3 Math             2 TRUE   \n12     3 Math             1 TRUE   \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncomplete_df <- df %>% # <1> \n  complete(\n    student_id = full_seq(student_id, 1), # <2> \n    nesting(day, class), # <3> \n    fill = list(present = FALSE), # <4> \n    explicit = FALSE # <5> \n  ) %>%\n  arrange(day, class, student_id, present) # <6> \n```\n:::\n\n\n\n1.  Creating a complete dataframe with all possible combinations of `student_id` and nested combinations of `day` and `class`\n2.  `full_seq()` generates a sequence of student IDs, using the number of unique student IDs as the maximum value\n3.  `nesting()` creates only combinations that already exist in the data\n4.  Fills missing attendance data with `FALSE`\n5.  Limit the `fill` to only the newly created (i.e. previously implicit)\n6.  Orders the resulting data frame by `day`, `class`, `student_id`, and `present`\n\n\n\n::: {.cell .output}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 21 x 4\n   student_id   day class   present\n        <dbl> <dbl> <chr>   <lgl>  \n 1          1     1 English TRUE   \n 2          2     1 English TRUE   \n 3          3     1 English FALSE  \n 4          4     1 English TRUE   \n 5          1     1 Science FALSE  \n 6          2     1 Science TRUE   \n 7          3     1 Science FALSE  \n 8          4     1 Science FALSE  \n 9          1     2 English TRUE   \n10          2     2 English FALSE  \n11          3     2 English FALSE  \n12          4     2 English TRUE   \n13          1     2 Math    TRUE   \n14          2     2 Math    TRUE   \n15          3     2 Math    FALSE  \n16          4     2 Math    TRUE   \n17          1     3 Math    TRUE   \n18          1     3 Math    TRUE   \n19          2     3 Math    TRUE   \n20          3     3 Math    FALSE  \n21          4     3 Math    FALSE  \n```\n:::\n:::\n\n\n\nBy using `nesting()` within `complete()`, we explicitly handle missing data, creating a comprehensive nested dataset suitable for further analysis. This approach guarantees that our analysis is based on a more complete and reliable dataset, providing accurate insights into student attendance across different classes and days.\n\n### Simple Imputations\n\nTo explore different imputations we will use \"airquality\" dataset that contains daily measurements of air pollutants and weather conditions in New York City during a five-month period in 1973. It includes data on ozone concentration, solar radiation, temperature, wind speed, and relative humidity.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(airquality)\nairquality <- drop_na(airquality, Solar.R)\ninvisible(mice::md.pattern(airquality)) # <1>\n```\n\n::: {.cell-output-display}\n![](imputation_files/figure-pdf/unnamed-chunk-6-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nhead_na <- function(data, n = 5) {\n  data %>%\n    filter(is.na(Ozone)) %>%\n    select(-Ozone) %>%\n    head(n)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Ozone Solar.R Wind Temp Month Day\n1    41     190  7.4   67     5   1\n2    36     118  8.0   72     5   2\n3    12     149 12.6   74     5   3\n4    18     313 11.5   62     5   4\n5    NA      NA 14.3   56     5   5\n6    28      NA 14.9   66     5   6\n```\n:::\n:::\n\n\n\n1.  `md.pattern` makes a matrix of missing values. `invisible` to only show plot, without matrix output.\n\n#### Fixed Value Imputation\n\nMissing values are replaced with a predetermined constant value. This method is simple and useful when you believe the fixed value reasonably represents the missing data.\n\n#### Mean and Median Imputation\n\nMissing values are replaced with the mean or median of the non-missing data in the same column. Using the mean is effective when data follow a normal distribution, but it can be affected by outliers, leading to biased imputations. In contrast, using the median is more robust to outliers and suitable for skewed or extreme data.\n\n#### Fill\n\nIn some scenarios, it's rational to replace missing data with either preceding or succeeding values. This approach is particularly effective with datasets where the next available value logically substitutes the missing ones, such as in time-series or ordered data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairquality %>%\n  arrange(Month, Day) %>%\n  mutate(\n    imp_fixed = replace(Ozone, is.na(Ozone), 0),  # <1> \n    imp_mean = replace(Ozone, is.na(Ozone), round(mean(Ozone, na.rm = TRUE), 2)), # <2> \n    imp_median = replace(Ozone, is.na(Ozone), median(Ozone, na.rm = TRUE)), # <3> \n    imp_fill = Ozone,\n    .keep = \"used\"  # <4> \n  ) %>%\n  fill(imp_fill, .direction = \"down\") %>% # <5>\n  head_na()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  imp_fixed imp_mean imp_median imp_fill\n1         0     42.1         31        8\n2         0     42.1         31       32\n3         0     42.1         31       32\n4         0     42.1         31       37\n5         0     42.1         31       37\n```\n:::\n:::\n\n\n\n1.  Impute with a fixed value (0 in this case).\n2.  Impute with the mean.\n3.  Impute with the median.\n4.  Keep only \"used\" columns.\n5.  Fills missing values with the most recent non-missing value above.\n\nRemember that the choice of imputation method can significantly impact the results of your analysis. Always consider the nature of your data, the distribution of missingness, and the potential implications of each method before making a decision.\n\n#### K-Nearest Neighbors (KNN)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# KNN imputation using the 'VIM' package\nlibrary(VIM)\nairquality_knn <- kNN(airquality)\nhead_na(airquality_knn)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] Solar.R     Wind        Temp        Month       Day         Ozone_imp  \n [7] Solar.R_imp Wind_imp    Temp_imp    Month_imp   Day_imp    \n<0 rows> (or 0-length row.names)\n```\n:::\n:::\n\n\n\nKNN imputation can be a good choice when the data have a complex structure that simple methods can't capture. It uses the relationships between variables to estimate missing values. However, it can be computationally intensive for large datasets.\n\n#### Maximum Likelihood\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Maximum Likelihood using the 'norm' package\nlibrary(norm)\ns <- prelim.norm(as.matrix(airquality))   #do preliminary manipulations\nthetahat <- em.norm(s, showits = FALSE)   #find the mle\nrngseed(1337)   #set random number generator seed\nairquality_mlh <- imp.norm(s,thetahat,airquality)\nhead_na(airquality_mlh)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Solar.R Wind    Temp    Month   Day    \n<0 rows> (or 0-length row.names)\n```\n:::\n:::\n\n\n\nMaximum likelihood estimation can be a powerful method for imputing missing data, especially when the data are normally distributed. However, it makes strong assumptions about the data and can be complex to implement.\n\n#### Regression\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit a linear regression model\nmodel <- lm(Ozone ~ ., data = airquality)\n\n# Predict missing values\npredicted_values <- predict(model, newdata = airquality)\n\n# Replace missing values with predicted values\nairquality %>% \n  mutate(\n    Ozone = Ozone,\n    imp_lm = ifelse(is.na(Ozone), predicted_values, Ozone),\n    .keep = \"used\"\n  ) %>% \n  head_na()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      imp_lm\n1  35.446534\n2 -16.177404\n3   1.688479\n4  51.628995\n5  40.719713\n```\n:::\n:::\n\n\n\nRegression imputation can be useful when there are relationships between variables that can be captured by a regression model. However, it can lead to underestimated variance and overestimated model fit.\n\n#### Forest\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install and load the missForest package\nlibrary(missForest)\n\nairquality %>%\n  mutate(\n    Ozone = Ozone,\n    imp_forest = missForest(.)$ximp$Ozone,\n    .keep = \"used\"\n  ) %>%\n  head_na()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  imp_forest\n1   27.98000\n2   19.67000\n3   26.02500\n4   37.55333\n5   25.59000\n```\n:::\n:::\n\n\n\nTree-based methods like Random Forests can handle complex data structures and can be a good choice when relationships between variables are non-linear or involve interactions. However, they can be computationally intensive and may not perform well with small sample sizes or sparse data.\n\nRemember, each of these methods has its own strengths and weaknesses, and the choice of method should be guided by the nature of your data and the specific requirements of your analysis. Always check the assumptions of the imputation method you're using and consider the potential impact on your results.\n\n### Multiple Imputations\n\nNow, listen closely, imputing can be better then dropping the data! Wait what? Yeh, because instead of dropping the data you preserve it! However, there is a method to this.\n\n[@jakobsenWhenHowShould2017]\n\nMultiple imputation is a statistical technique that has been increasingly utilized since its inception in the early 1970s. It is a simulation-based method designed to address the issue of missing data in research studies. The process of multiple imputation is carried out in three main steps:\n\n1.  **Imputation Step**: In this initial stage, missing values in the dataset are identified and replaced with a set of plausible values, creating multiple completed datasets. These plausible values, or 'imputations', are generated based on a chosen imputation model. To reduce sampling variability from the imputation process, it is often preferable to generate 50 datasets or more.\n\n2.  **Completed-Data Analysis (Estimation) Step**: Once the imputed datasets are created, the desired analysis is performed separately on each dataset. For instance, if 50 datasets were generated during the imputation step, 50 separate analyses would be conducted.\n\n3.  **Pooling Step**: The results obtained from each completed-data analysis are then combined into a single multiple-imputation result. Each analysis result is considered to have the same statistical weight, so there is no need for a weighted meta-analysis.\n\nIt is crucial to ensure compatibility between the imputation model and the analysis model, or that the imputation model is more general than the analysis model. This means that the imputation model should include more independent covariates than the analysis model. For instance, if the analysis model includes significant interactions, then the imputation model should include them as well. Similarly, if the analysis model uses a transformed version of a variable, then the imputation model should use the same transformation.\n\n![](images/imputation_flow.webp)\n\n#### MICE (Multivariate Imputation by Chained Equations)\n\nThe `mice` package in R is a powerful tool for handling missing data through multiple imputation. It uses the Multivariate Imputation by Chained Equations (MICE) algorithm, which creates multiple imputations (replacement values) for multivariate missing data. The package creates multiple imputations by applying specified imputation methods to each missing value in an iterative process, also known as 'chained equations'.\n\nHere's a basic example of how to use the `mice` package:\n\nFirst, install and load the `mice` package:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mice)\n```\n:::\n\n\n\n:::\n\nTODO: write about doing simple imputations\n\nMICE stands for *Multivariate Imputation via Chained Equations*, and it's one of the most common packages for R users. It assumes the missing values are missing at random (MAR).\n\nThe basic idea behind the algorithm is to treat each variable that has missing values as a dependent variable in regression and treat the others as independent (predictors). You can learn more about MICE in [this paper](https://www.researchgate.net/publication/44203418_MICE_Multivariate_Imputation_by_Chained_Equations_in_R).\n\nThe R `mice` packages provide many [univariate imputation methods](https://www.rdocumentation.org/packages/mice/versions/3.14.0/topics/mice), but we'll use only a handful. First, let's import the package and subset only the numerical columns to keep things simple. Only the `Age` attribute contains missing values:\n\nOnto the imputation now. We'll use the following MICE imputation methods:\n\n-   **pmm**: Predictive mean matching.\n\n-   **cart**: Classification and regression trees.\n\n-   **laso.norm**: Lasso linear regression.\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairquality %>% \n  mutate(\n  Ozone = Ozone,\n  imp_pmm = complete(mice(., method = \"pmm\", printFlag = FALSE))$Ozone,\n  imp_cart = complete(mice(., method = \"cart\", printFlag = FALSE))$Ozone,\n  imp_lasso = complete(mice(., method = \"lasso.norm\", printFlag = FALSE))$Ozone,\n  .keep = \"used\"\n) %>%\n  head_na()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  imp_pmm imp_cart imp_lasso\n1      36       16  27.95365\n2       6       18 -42.88007\n3      37       30  22.69929\n4      29       36  73.60000\n5      36       21  15.31121\n```\n:::\n:::\n\n\n\nAssuming you have a dataset `data` with missing values, you can use `mice()` function to perform multiple imputation:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform multiple imputation\nimp <- mice(airquality, m = 50, method = \"pmm\", seed = 1337, printFlag = FALSE)\n\n# m=5 specifies the number of multiple imputations (i.e., the number of complete datasets to generate)\n# method='pmm' specifies predictive mean matching method for imputation\n# seed=500 for reproducibility\n```\n:::\n\n\n\nThe `mice` function supports several imputation methods. The choice of method depends on the nature of variables. Here are a few commonly used methods:\n\n-   `'pmm'`: Predictive mean matching. Useful for numeric data.\n-   `'logreg'`: Logistic regression. Useful for binary data.\n-   `'polyreg'`: Polytomous logistic regression. Useful for ordered categorical data.\n-   `'polr'`: Proportional odds model. Useful for ordered categorical data.\n\nAfter imputation, you can analyze each dataset separately. For example, if you want to fit a linear regression model and summarize the pooled results:\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n         term     estimate   std.error statistic        df      p.value\n1 (Intercept) -56.70021557 24.82939110 -2.283593  77.04180 2.515150e-02\n2     Solar.R   0.04581614  0.02211941  2.071310 120.16600 4.047030e-02\n3        Wind  -3.28972276  0.71106796 -4.626453  70.93165 1.631604e-05\n4        Temp   1.85926001  0.27437473  6.776353  98.55404 9.089756e-10\n5       Month  -3.03408758  1.54608599 -1.962431 103.03587 5.240904e-02\n```\n:::\n:::\n\n\n\nYou can also use `gtsummary` to create a summary table, here `tbl_regression` automatically pools results.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gtsummary)\ntbl_regression(fit)\n```\n\n::: {.cell-output-display}\n|**Characteristic** | **Beta** | **95% CI** | **p-value** |\n|:------------------|:--------:|:----------:|:-----------:|\n|Solar.R            |   0.05   | 0.00, 0.09 |    0.040    |\n|Wind               |   -3.3   | -4.7, -1.9 |   <0.001    |\n|Temp               |   1.9    |  1.3, 2.4  |   <0.001    |\n|Month              |   -3.0   | -6.1, 0.03 |    0.052    |\n:::\n:::\n\n\n\nRemember, the imputation model should be compatible with the analysis model. If the analysis model includes interactions or transformations, they should be included in the imputation model as well.\n\nAlso, it's important to note that the `mice` package assumes that the missing data are Missing At Random (MAR), which means that the probability of a value being missing depends only on observed data and not on unobserved data. If this assumption is violated, the results of the imputation might be biased.\n\nImputation is a valuable tool for handling missing data, but it should be used judiciously and based on a thorough understanding of the data and the analysis objectives. Responsible imputation ensures that any assumptions made during the process align with the data generation process and results in more reliable and meaningful data analysis.\n\n#### Table of Imputations\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imputation_files/figure-pdf/unnamed-chunk-17-1.pdf)\n:::\n:::\n",
    "supporting": [
      "imputation_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": true
  }
}