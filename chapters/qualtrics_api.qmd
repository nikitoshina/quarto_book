---
title: "Qualtrics API"
editor: visual
---
Instead of downloading your data through Qualtrics every time we will load data using Qualtrics API. For a complete guide refer to this [vignette](https://cran.r-project.org/web/packages/qualtRics/vignettes/qualtRics.html), which this guide is based on.

University of San Francisco provides access to Qualtrics; however you need to separately request API access. Good news, I have talked to ITS and you should already have it! If not let me know!

First, we need to install a package `qualtRics`.
```{r}
# install.packages("qualtRics")
library("tidyverse")
library("qualtRics")
library("scales")
knitr::opts_chunk$set(echo = T, warning = F, message = F, error = F)
```

## Core Functions

Currently, the package contains three core functions:

+ `all_surveys()` shows surveys you can access.
+ `fetch_survey()` downloads the survey.
+ `read_survey()` reads CSV files you downloaded manually from Qualtrics.

It also contains a number of helper functions, including:

+ `qualtrics_api_credentials()` stores your API key and base url in environment variables.
+ `survey_questions()` retrieves a data frame containing questions and question IDs for a survey; 
+ `extract_colmap()` retrieves a similar data frame with more detailed mapping from columns to labels.
+ `metadata()` retrieves metadata about your survey, such as questions, survey flow, number of responses etc.

Note that you can only export surveys that you own, or to which you have been given administration rights.

## Connecting to the API

If you have received API access, now you can connect to the API. To get `api_key` and `base_url` go to Qualtrics Home Page > Account Settings > Qualtrics IDs or click [this link](https://usfca.qualtrics.com/Q/QualtricsIdsSection/IdsSection). Under "API" click "Generate Topic" and you will be issued a Token. Copy this string a put in "YOUR_API_KEY". Then look at "User" module, copy "Datacenter ID" and ".qualtrics.com" after it. Your Base Url should look something like this: "lad2.qualtrics.com". 

```{r eval=FALSE}
qualtrics_api_credentials(api_key = "YOUR_API_KEY", 
                          base_url = "YOUR_BASE_URL",
                          install = TRUE,
                        # overwrite = TRUE # If you need to update your credentials
                          )
```

```{r eval=FALSE}
qualtrics_api_credentials(api_key = "CEOj8Iwh6BUTNZ9J7PXDJLZpStQaXkmlwLPYzCgu", 
                          base_url = "lad2.qualtrics.com",
                          install = TRUE)
```
After `qualtrics_api_credintials` stored your credentials, you can use `all_surveys()` to fetch information on your surveys.
```{r cache=TRUE}
(surveys <- all_surveys()) 
```

Once you select the questionnaire you want you can refer to it using `id`. If you want redownload the data set `force_request = TRUE`, otherwise it will load prior saved download.

```{r cache=TRUE}
survey_data <- fetch_survey(surveyID = "SV_bJIs8lwz4CfAAgS", 
             verbose = TRUE,
             force_request = TRUE)
survey_data %>% glimpse()
```

In case you want to see text of the questions use `survey_questions()`.
```{r cache=TRUE}
survey_questions <- survey_questions(surveyID = "SV_bJIs8lwz4CfAAgS")
head(survey_questions, n = 5)
```

## Example
```{r cache=TRUE}
survey_data <- fetch_survey(surveyID = "SV_bJIs8lwz4CfAAgS", 
                            verbose = TRUE,force_request = TRUE)

survey_data <- survey_data %>% janitor::clean_names()

graph_data <- survey_data %>%select(gender, offer,  decision_81, participant_id, participant_role) %>% 
  mutate(participant_role = recode(participant_role,"A" = "dictator", "B" = "recipient" ),
         decision = recode(decision_81, "1" = "Accepted", "2" = "Declined")) %>% 
  mutate(interval = cut_width(offer, width = 10, center = 45)) %>%
  filter(participant_role == "recipient") %>% count(decision, interval) 
```
```{r}
#| code-fold: true
#| code-summary: "Show the code"
graph_data %>%
  ggplot(aes(x = interval, y = n, fill = as.factor(decision))) + 
  geom_col(position = position_stack()) + 
  theme_minimal(base_size = 20) + 
  scale_y_continuous(breaks = scales::breaks_extended(n = max(graph_data$n))) + 
  theme(panel.grid.major.x = element_blank(), 
        panel.grid.minor.x = element_blank(),
        legend.position = "top") +
  labs(x = "Offer size", y = "Count", title = "Results of the Ultimatum Game", fill = "Result")
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
pizza_table <- survey_data[c(22:29,72)] %>% select(-pizzas_6) %>% pivot_longer(-participant_id) %>% count(value) %>% drop_na()
 
 pizza_table %>% ggplot(aes(x = fct_reorder(value, n), y = n)) + 
   geom_col(fill = "steelblue") + 
   theme_minimal(base_size = 20) + 
   scale_y_continuous(breaks = scales::breaks_extended(n = max(pizza_table$n))) + 
   theme(panel.grid.major.y = element_blank(), 
         panel.grid.minor.y = element_blank(),
         panel.grid.minor.x = element_blank(),
         legend.position = "top") +
   labs(x = NULL, y = "Count", title = "What Pizzas do you like?") + 
   coord_flip()
```




