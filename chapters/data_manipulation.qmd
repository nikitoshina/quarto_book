---
title: "Data Manipulation"
editor: visual
---
```{r include=FALSE}
library("tidyverse")
knitr::opts_chunk$set(echo = T, warning = F, message = F, error = F)
```
Data visualization and manipulation are essential tools for understanding and communicating complex information in data analysis. R, a powerful programming language for data analysis, offers a variety of packages for creating visually appealing plots and manipulating data. One of the most popular and user-friendly collections of packages for data visualization and manipulation in R is Tidyverse created by Hadley Wickham, the Chief Scientist at RStudio. The Tidyverse is a collection of packages that covers all common tasks, it can be installed using `install.packages("tidyverse")` and activated with `library("tidyverse")`. In this introduction, we will explore the basics of using Tidyverse, we will use `readr` to read data, `tidyr` to tidy, `dplyr` to manipulate, and `ggplot2` to visualize. To learn more about the Tidyverse check out their website [https://www.tidyverse.org/](https://www.tidyverse.org/).

## Basics
Let us start with some basic concepts! We can use R as a basic calculator
```{r}
# This is a comment use "#" to comment something!
2+2
2*4 
2^8
(1+3)/(3+5)
log(10) # This takes a natural log of 10! 
```
We can define variables and perform operations on them. R uses `=` or `<-` to assign values to a variable name. It is stylistically preferred to use `<-` to avoid confusion and some errors.
```{r}
x <- 2 # same as x = 2
x * 4
```
`x <- 2` stored `2` in `x`. Later when we wrote `x * 4` R substituted `x` for `2` evaluating `2 * 4` to get `8`. We can update value of `x` as much as we want using `=` or `<-`. Keep in mind R is case sensitive so `X` and `x` are different.
```{r}
x
x <- x * 5
```

### Data Types
R has a number of different data types and classes such as data.frames, which are similar to excel spreadsheets with columns and rows. We will first look at vectors. Vectors can hold multiple values of the same types. Most basic ones are numeric, character and logical.
```{r}
x
class(x)
```
```{r}
(name <- "Parsa Rahimi") # wrapping with (...) will print the variable
class(name)
```
```{r}
(true_or_false <- TRUE)
class(true_or_false)
```

Note that `name` is stored as a single character string. What if we want store name and surname separately in the same object? We can use concatenate `c()` to combine objects of similar class into a vector! 

```{r}
(name_surname <- c("Parsa","Rahimi"))
length(name) 
length(name_surname)
```

Notice how length of the `name` is 1 and length of the `name_surname` is 2! Let's make a numeric vector and do some operations on it!

```{r}
(i <- c(1, 2, 3, 4))
i + 10 # add 10 to each elements
i * 10 # multiply each element by 10
i + c(2, 4, 6, 8) # add elements together in matching positions
```

We haven't modified `i` with any of those operations. The results are just printed and not stored. If we want to preserve the results we have to store them in a variable.

```{r}
name
name <- i + c(5,4,2,1)
name
```

Notice that `name` is no longer "Parsa Rahimi". It has been overwritten by assigning a numeric vector instead of a character string. But be careful we can perform numeric operations only on numeric objects otherwise we will receive an error. You can use `str()` to get structure of the object such as type, length and other.

```{r error = TRUE}
name_surname + 2
str(name_surname)
```

## Downloading Data
If you are familiar with Base R (functions that come with the R on installation) you know about read.csv(). `readr` provides a number of function that solve common issues of base R read function. `read_csv` loads data 10 time faster and produces a tibble instead of a data frame while avoiding inconsistencies of the `read.csv`. 'Wait what is tibble?' you might ask. Tibbles is special type of data frame. There are superior to regular data frames as they load faster, maintain input types, permit columns as lists, allow non-standard variable names, and never create row names. Okay you have your data lets load it! First, you need to know the path to your data. You can go find you file and check its location and then copy paste it. If you are windows user your path might have "\\", which is an escape character. To fix that replace "\\" with "/". By copying the path you are getting absolute path "/Users/User/Documents/your_project/data/file.csv" alternatively you can use local a local path from the folder of the project "/data/file.csv". Let's read the data! `readr::` specifies which packages to use. Replace the text between "..." to your path.

### Example Data
I will be using a sample of experiment's results from Climate and Cooperation Experiment from Mexico. During the experiments, subjects were asked to complete three series of ravens matrices, four dictator games, and a single lottery game. Sessions below 30 Celsius are labeled as control, and sessions above 30 Celsius as treatment. We will be primarily using results from Raven's matrices games: 3 sets of 12 matrices. First set, `pr_`, is piece-rate round where participants received points for each correctly solved matrix. Second set, `tr_`, is tournament round where participants competed againts a random opponent and the winner received double point and the loser received nothing. Third set, `ch_`, is choice round. Participants were asked to decide whether they want to play piece-rate or tournament againts a different opponent's score from tournament round.

You can find data in the `data` in GitHub repository.
We will need `tidyverse`.

```{r}
library(tidyverse)
```
```{r}
data <- readr::read_csv("https://raw.githubusercontent.com/nikitoshina/ECON-623-Lab-2023/main/data/mexico_sample_data.csv?token=GHSAT0AAAAAAB5WTPULI26TZP545VNUFQE6Y6O4XVA") #Download data from git hub
```

We can use `glimpse()` to get a glimpse at the data. It will give us a sample and type of the column. Another very common way is to use `head()` to get a slice of the top rows or `tail()` to get a slice of bottom rows. You can also view the entire data set with `View()` 

```{r}
data %>% glimpse()
```

## Basic Data Management
dplyr uses a collection of verbs to manipulate data that are piped (chained) into each other with a piping operator `%>%` from `magrittr` package. The way you use functions in base R is you wrap new function over the previous one, such as `k(g(f(x)))` this will become impossible to read very quickly as you stack up functions and their arguments. To solve this we will use pipes `x %>% f() %>% g() %>% k()`! Now you can clearly see that we take x and apply f(), then g(), then k(). Note: base R now also has its own pipe `|>`, but we will stick to `%>%` for compatibility across packages. 

### `select()`
`select()` selects only the columns that you want, removing all other columns. You can use column position (with numbers) or name. The columns will be displayed in the order you list them. We will select subject_id, temperature, gender and results of raven's matrices games. 

+ `id` is a unique subject identification number, where site_id.session_n.subject_n (001.001.001).
+ `mean_temp_celsius` is mean temperature through the session
+ `gender` is gender of the subject.
+ `pr_correct` is number of correct answers in *piece-rate* round.
+ `tr_correct` is number of correct answers in *tournament* round.
+ `ch_correct` is number of correct answers in *choice* round.
+ `ch_tournament` is 1 if participant decided to play tournament and 0 if choice.

```{r}
data_raven <- data %>% select(id, mean_temp_celsius,gender, pr_correct, tr_correct, ch_tournament, ch_correct) 
head(data_raven)
```
You can also exclude columns or select everything else with select using `-`
```{r}
data_raven %>% select(-gender) %>% head()
```

### `filter()`
`filter()` keeps only rows that meet the specified criteria.
Let's filter and make 2 data sets one for Males and, one for Females.
```{r}
data_male <- data_raven %>% filter(gender == "Male") # we use == for comparison
data_female <- data_raven %>% filter(gender == "Female")
head(data_male)
head(data_female)
```
We can chain multiple requirements. Here we will look at Males, temperature over 30 celsius or Females, temperature below 30. Notice that we use `&` as "and", `|` as "or, and wrap the two conditions into "()" to avoid confusion. It could read it as `mean_temp_celsius > 30 | gender == "Female"`.
```{r}
data_raven %>% 
  filter( 
    (gender == "Male" & mean_temp_celsius > 30) | (gender == "Female" & mean_temp_celsius < 30)
        )
```
### `arrange()`
`arrange()` allows you to order the table using a variable. 
Let's see which subject scored the worst in `pr_correct`.
```{r}
data_raven %>% arrange(pr_correct) %>% head()
```
We can also sort in descending order using `desc()` modifier. Let's look at who scored the most!
```{r}
data_raven %>% arrange(desc(pr_correct)) %>% head()
```


### `mutate()`
`mutate()` adds new columns and modifies current variables in the data set. 
Let's create a dataset with 10 rows and make three new variable columns as an example
```{r}
tibble(rows = 1:10) %>% mutate(
  One = 1,
  Comment = "Something",
  Approved = TRUE
)
```
`mutate()` can use existing variables from the data set to create new ones! Lets convert Celsius to Fahrenheit, see how many point more people scored in tournament over piece-rate round, and check how far from the mean they scored in piece-rate round!  
```{r}
data_raven %>% mutate(mean_temp_fahrenheit = (mean_temp_celsius * 9/5) + 32,
                      impovement = tr_correct - pr_correct,
                      pr_deviation = pr_correct - mean(pr_correct))

```
Notice that we can nest functions within `mutate()`: first we took `mean()` of the entire column and then subtracted it from `pr_correct`.

### `recode()`
`recode()` modifies the values within a variable. Here is a template:

> data %>% mutate(Variable = recode(Variable, "old value" = "new value"))

Let's use `recode()` to change "Male" to "M" and "Female" to "F".

```{r}
data_raven <- data_raven %>% mutate(gender = recode(gender, "Male" = "M", "Female" = "F"))
```

## `summarize()`
`summarize()` collapses all rows and returns a one-row summary.
We will use summary to calculation what percentage of participant were male, median score in piece-rate round, max score in tournament, percentage of people choosing tournament in choice and mean score in choice round.
```{r}
data_raven %>% 
  summarize(perc_male = sum(gender == "Male", na.rm = T) / n(),
            pr_median = median(pr_correct),
            tr_max = max(tr_correct),
            ch_ratio = sum(ch_tournament) / n(),
            ch_mean = mean(ch_correct))
```

## `group_by()` and `ungroup()`
### `group_by()`
`group_by()` groups data by specific variables for future operations.
We can use `group_by()` and `summarize()` to calculate different summary statistics for genders!
```{r}
data_raven %>% 
  drop_na(gender) %>%  # removes NA gender
  group_by(gender) %>% 
  summarize(pr_mean = mean(pr_correct),
            tr_mean = mean(tr_correct),
            ch_mean = mean(ch_correct),
            pr_sd = sd(pr_correct),
            n = n()) %>%
  ungroup()
```
Let's group by gender and choice in choice round and look at points in choice round!
```{r}
data_raven %>%
  drop_na(gender) %>%  # removes NA gender
  group_by(gender, ch_tournament) %>% 
  summarize(ch_mean = mean(ch_correct),
            pr_sd = sd(ch_correct),
            n = n()) %>%
  ungroup()
```
### `ungroup()`
`ungroup()` does exactly what you think -- removes the grouping! Always ungroup your data after you are done with operation that required grouping, else it will get messy. Look at this example
```{r}
data_raven %>%
  drop_na(gender) %>%  # removes NA gender
  group_by(gender) %>% 
  mutate(n = n()) %>%
  mutate(mean_male = mean(gender == "Male")) %>%
  ungroup() %>%
  select(id, gender, n, mean_male) %>% head(n = 5)
```
Notice how mean_male (ratio of male to total) is 0 for Female and 1 for Male. It is because the data was grouped and we performed operation on Males and Females separately.
```{r}
data_raven %>%
  drop_na(gender) %>%  # removes NA gender
  group_by(gender) %>% 
  mutate(n = n()) %>%
  ungroup() %>%
  mutate(mean_male = mean(gender == "Male")) %>%
  select(id, gender, n, mean_male) %>% head(n = 5)
```
This time on the other hand we ungrouped the data, correctly calculating the ratio!

### `rowwise()`
`rowwise()` produces a row-wise grouping.
Later you might want to run a calculation row-wise instead of column-wise, but your column will be filled with an aggregate result. This is where `rowwise()` comes in to save the day! To demonstrate, we will make a dataframe with a column of lists and try to find the length of each list.
```{r}
df <- tibble(
  x = list(1, 2:3, 4:6,7:11)
)

df %>% mutate(length = length(x))
```
Hmmm... Instead of lists' lengths we got the total number of rows in the data set (length of column `x`). Now let's use `rowwise()` 
```{r}
df %>% rowwise() %>%
  mutate(length = length(x))
```

Yey! Here R runs `length()` on each list separately, giving us correct lengths! Alternatively you can use `lengths()`, which loops `length()` over  each list.

## `count()`
`count()` is similar to `group_by()` and `summarize()` combo -- it collapses the rows and counts the number of observations per group of values. 
```{r}
data_raven %>% count(gender)
```

Similar to `group_by()` you can select multiple columns to group.
```{r}
data_raven %>% count(gender, ch_tournament)
```


## `rename()`
`rename()` renames a column.
Notice that the "New Name" is on the left and "Old Name" is on the right. Let's rename `id` to `subject_id` and `gender` to `sex`.
```{r}
data_raven %>% rename("subject_id" = "id", "sex" = "gender") %>% head(n = 5)
```

## `row_number()`
`row_number()` fills a column with consecutive numbers. It is especially useful if you need to create an id column. Let's remove `id` column and make a new one with `row_number()`.
```{r}
data_raven %>% 
  select(-id) %>%
  mutate(id = row_number()) %>% 
  relocate(id) %>% # used to move id at the beginning
  head(n = 5)
```
