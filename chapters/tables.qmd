---
title: "Make Tables"
message: false
warning: false
---

Honestly, I hate making tables. I do not know why, but they never turn out right. However, the `gt` (Grammar of Tables) package makes it easy and actually enjoyable. Therefore, this section will focus on creating simple summary tables using `gt`. It's essential to note that `gt` is just one of many available packages for table creation - others include `kableExtra` for more complex tables, `DT` tables for HTML interactive tables, `reactablefmtr` for reactive tables, and `flextable`, among others. Unlike visualization and data wrangling where the use of `ggplot`, `plotly`, `dplyr`, and `data.table` is nearly universal, there is no default package for table creation. Hence, we've chosen `gt` and `gtsummary` due to their ease of use and their ability to handle a range of basic tasks. The `gt` package simplifies the creation of elegant, customizable tables, making it a versatile tool for reports, presentations, and web applications.

> Ask ten R users about their preferred table package, and you'll likely receive twenty different answers.

![GT Table Parts](images/gt_table_parts.png)

## `gt` Tables 

### Installing and Loading the `gt` Package 

To start, ensure you have the `gt` package installed. We'll also use the `gtExtras` package to expand the `gt` package's capabilities with custom themes, conditional formatting, and more. In addition, we'll use the `emojifont` package for accessing emojis and `dplyr` from `tidyverse` for data manipulation.

```{r}
# install.packages(c("gt","gtExtras","emojifont"))
library(tidyverse)
library(gt)
library(gtExtras)
library(emojifont)
```

As an example we will use built-in `gtcars` dataset which contains information on various automobiles. Let's look at it using `gt()`.

```{r}
dplyr::sample_n(gt::gtcars, size = 4) %>% gt()
```

### Prepare your data

The `gt` package works seamlessly with `dplyr`, allowing us to utilize familiar verbs for table formatting. Let's start by focusing on the top auto industry country, Germany. We'll group cars by their manufacturer (mfr) and sort them based on their price (msrp). During table creation, the `rowname_col` parameter allows us to designate a column as row names - for this example, we'll use the 'model' column.

```{r}
(table_grouped <- gt::gtcars %>% # <1>
  dplyr::filter(ctry_origin == "Germany") %>% # <2>
  dplyr::group_by(mfr) %>% # <3>
  dplyr::arrange(desc(msrp)) %>% # <4>
  dplyr::slice_head(n = 2) %>% # <5>
  dplyr::filter(mfr %in% c("Audi", "BMW")) %>% # <6>
  gt::gt(rowname_col = "model")) # <7>
```
1. Start with the `gtcars` dataset from the `gt` package.
2. Filter the data to include only cars that originated from Germany.
3. Group the data by the manufacturer.
4. Arrange the data in descending order based on the Manufacturer's Suggested Retail Price (MSRP).
5. Select only the top two cars (based on the previous sorting).
6. Filter to include only cars from Audi and BMW.
7. Start a new `gt` table using the car models as row names.

The table contains many columns, and to make it more readable, we can hide some columns using `cols_hide`. Why use `cols_hide` instead of dropping the columns with `dplyr`? Sometimes, we may need to utilize a column in conditional statements but we do not want to display it. To group performance-related columns together, we can use `cols_move`. Though this could be done with `dplyr`, integrating it into our table-creation process makes the workflow more streamlined. We can distinguish these grouped columns by adding a header spanner with `tab_spanner`, specifying the `columns` and setting the `label`.

```{r}
(table_span <- table_grouped %>% # <1>
  gt::cols_hide(columns = c(trim, bdy_style, drivetrain, ctry_origin, trsmn)) %>% # <2>
  gt::cols_move(columns = c(msrp, trsmn, mpg_c, mpg_h), after = year) %>% # <3>
  gt::tab_spanner(columns = c(mpg_c, mpg_h, hp, hp_rpm, trq, trq_rpm), label = "Performance")) # <4>
```
1. Start with the previously created `table_grouped`.
2. Hide certain columns that aren't needed in the final table.
3. Move specific columns to appear after the `year` column.
4. Create a spanner header for performance-related columns.

At times, we may want to combine pairs of related columns into a single column. For that, we can use the `cols_merge()` function. We'll merge horsepower (hp) with associated rpm (hp_rpm), torque (trq) with associated rpm (trq_rpm), and city miles per gallon (mpg_c) with highway miles per gallon (mpg_h). The function takes `columns`, which can be referenced in `text` with `{#}` of column. Since we are working with HTML tables, we can use HTML tags, specifically `<br>`, to add a line break. Note that the joined column will use the first column's name, and the labels are purely cosmetic and can't be used as reference. We'll then use the `cols_label()` function to assign custom labels to the columns, using the `column_name = "column_label"` syntax.

```{r}
(table_merge <- table_span %>% # <1>
  cols_merge(columns = c(hp, hp_rpm), pattern = "{1}<br>@{2}rpm") %>% # <2>
  cols_merge(columns = c(trq, trq_rpm), pattern = "{1}<br>@{2}rpm") %>% # <3>
  cols_merge(columns = c(mpg_c, mpg_h), pattern = "{1}c<br>{2}h") %>% # <4>
  cols_label( # <5>
    year = "Year",
    msrp = "MSRP",
    mpg_c = "MPG",
    hp = "Horse Power",
    trq = "Torque"
  ))
```
1. Start with the previously created `table_span`.
2. Merge the horsepower (hp) and horsepower rpm (hp_rpm) columns.
3. Merge the torque (trq) and torque rpm (trq_rpm) columns.
4. Merge the city mpg (mpg_c) and highway mpg (mpg_h) columns.
5. Set custom labels for specific columns.

The `gt` package provides a variety of `fmt_*` formatting functions that are useful for adjusting the display of numeric and text columns. For example, we can set the `msrp` column to display currency in USD without decimals. We can adjust the alignment of columns using `cols_align`, allowing us to select columns and set alignments to "right", "left", or "center". Since the merged columns appear bulky with two lines, we can decrease the text size using `tab_style`. This function utilizes a `style` definition, provided by helper functions such as `cell_styles` that include supported style information. In this example, we use `cell_text` to set the text size to "12px". The second argument, `locations`, uses another helper function `cells_*()`. To target cells in the body, we apply `cells_body` to the columns `mpg_c`, `hp`, and `trq`. To enhance our tables with color, we can use the `data_color` function, which supports the creation of a simple gradient or the application of a solid color to the data. The function can specify a `domain` and use prebuilt palettes. For more functionality, consider `gt_color_rows()` from `gtExtras`. For more information, refer to the package's documentation.

```{r}
(table_format <- table_merge %>% 
  fmt_currency(columns = msrp, decimals = 0, currency = "USD") %>% # <1> 
  cols_align(columns = c(mpg_c, hp, trq), align = "center") %>% # <2> 
  tab_style( # <3>
    style = cell_text(size = "12px"), # <3>
    locations = cells_body(columns = c(mpg_c, hp, trq)) # <3>
  ) %>% # <3> 
  data_color(columns = msrp, colors = c("white", "aquamarine"))) # <4>
```
1. Format the msrp column as currency
2. Center align specific columns
3. Apply cell text style to specific columns
4. Apply a data-driven color scale to the msrp column

The table is now quite good looking! We can set a title and subtitle using the `tab_header()` function. In this example, we add a title "German Automobiles" and an emoji-inclusive subtitle using the `emojifont` package. To clarify the term "MSRP" for unfamiliar readers, we can use a footnote. Footnotes can be added to individual cells either by specifying the row number or using expressions - here, the most expensive car is the **BMW i8**, which is also electric! Like `tab_style`, you need to provide the `location` and `footnote` text. Don't forget to add your data source with the `tab_source_note` function. Wrapping text in `md()` allows us to utilize Markdown syntax for formatting, including adding links.

```{r}
(table_header <- table_format %>% # <1>
  tab_header(title = "German Automobiles", subtitle = paste0("These are some nice ", emojifont::emoji("car"), "s")) %>% # <2>
  tab_footnote(locations = cells_column_labels(columns = msrp), footnote = "Manufacturer's Suggested Retail Price in USD") %>% # <3>
  tab_footnote(locations = cells_body(msrp, msrp == max(msrp)), footnote = "Electric cars used to be expensive") %>% # <4>
  tab_source_note(source_note = md("Source: **gtcars** [dataset from gt package](https://gt.rstudio.com/articles/gt-datasets.html)"))) # <5>
```
1. Start with the previously formatted table.
2. Add a title and a subtitle to the table with an emoji.
3. Add a footnote to clarify what MSRP stands for.
4. Add a specific footnote to the most expensive car, noting that electric cars used to be expensive.
5. Add a source note to cite the source of the data.

To take your `gt` tables a step further, you can apply themes using the `gtExtras` package. This package offers a variety of pre-built themes that can be easily added to your tables, providing them with a consistent and polished look. After installing and loading the `gtExtras` package, you can use one of its theme functions to apply a specific style to your table. This approach makes it simple to create visually appealing tables with minimal effort. Let's add a theme similar to the Five Thirty Eight website.

```{r}
(table_themed <- table_header %>%
  gtExtras::gt_theme_538()) # <1>
```
1. Add Five Thirty Eight theme to the table

After creating a visually appealing table, you'll likely want to save it. Although there isn't a direct method for saving to Excel, the `gt` package supports saving the table in various formats such as `.html` for embedding in websites or emails, `.png` for images, `.tex` for LaTeX documents, `.pdf` for PDF files, `.rtf` for RTF files, and `.docx` for Microsoft Word documents.

```{r eval = FALSE}
# Save the `gt` table as an HTML file using `gtsave()`. Use the `inline_css = TRUE` option for inlining CSS, which is useful when embedding the table in an HTML email. Without the `inline_css` option, the HTML file will have embedded CSS styles instead.

table_themed %>% gtsave(filename = "tab_1.html", inline_css = TRUE)
table_themed %>% gtsave(filename = "tab_1.html")

# Saving a table as a PNG file creates a cropped image of the HTML table, and you can adjust the whitespace around it using the expand option. You also need to install.package("webshot2").
table_themed %>% gtsave("tab_1.png", expand = 10)

# LaTeX
table_themed %>% gtsave("tab_1.tex")
# RTF
table_themed %>% gtsave("tab_1.rtf")
# Microsoft Word
table_themed %>% gtsave("tab_1.doc")
```

And the final output will look something like this:

Here's how your code can be transferred into an annotated version:

```{r}
library(tidyverse) # <1>
library(gt) # <1>
library(gtExtras) # <1>
library(emojifont) # <1>

# Create a formatted table of German automobiles 
gt::gtcars %>% # <2>
  filter(ctry_origin == "Germany") %>% # <3>
  group_by(mfr) %>% # <4>
  arrange(desc(msrp)) %>% # <5>
  gt(rowname_col = "model") %>% # <6>
  cols_hide(columns = c(trim, bdy_style, drivetrain, ctry_origin, trsmn)) %>% # <7>
  cols_move(columns = c(msrp, trsmn, mpg_c, mpg_h), after = trim) %>% # <8>
  tab_spanner(columns = c(mpg_c, mpg_h, hp, hp_rpm, trq, trq_rpm), label = "Performance") %>% # <9>
  cols_merge(columns = c(hp, hp_rpm), pattern = "{1}<br>@{2}rpm") %>% # <10>
  cols_merge(columns = c(trq, trq_rpm), pattern = "{1}<br>@{2}rpm") %>% # <11>
  cols_merge(columns = c(mpg_c, mpg_h), pattern = "{1}c<br>{2}h") %>% # <12>
  cols_label( # <13>
    year = "Year",
    msrp = "MSRP",
    mpg_c = "MPG",
    hp = "Horse Power",
    trq = "Torque"
  ) %>%
  fmt_currency(columns = msrp, decimals = 0, currency = "USD") %>% # <14>
  cols_align(columns = c(mpg_c, hp, trq), align = "center") %>% # <15>
  tab_style( # <16>
    style = cell_text(size = "12px"),
    locations = cells_body(columns = c(mpg_c, hp, trq))
  ) %>%
  data_color(columns = msrp, colors = c("white", "aquamarine")) %>% # <17>
  tab_header(title = "German Automobiles", subtitle = paste0("These are some nice ", emojifont::emoji("car"), "s")) %>% # <18>
  tab_footnote(locations = cells_column_labels(columns = msrp), footnote = "Manufacturer's Suggested Retail Price in USD") %>% # <19>
  tab_footnote(locations = cells_body(msrp, msrp == max(msrp)), footnote = "Electric cars used to be expensive") %>% # <20>
  tab_source_note(source_note = md("Source: **gtcars** [dataset from gt package](https://gt.rstudio.com/articles/gt-datasets.html)")) %>% # <21>
  gtExtras::gt_theme_538() # <22>
```

1. Load the necessary libraries for data manipulation and visualization.
2. Load the data.
3. Filter the data to include only cars that originated from Germany.
4. Group the data by the manufacturer.
5. Arrange the data in descending order based on the Manufacturer's Suggested Retail Price (MSRP).
6. Start a new gt table using the car models as row names.
7. Hide certain columns that aren't needed in the final table.
8. Move specific columns to appear after the trim column.
9. Create a spanner header for performance-related columns.
10. Merge the horsepower (hp) and horsepower rpm (hp_rpm) columns.
11. Merge the torque (trq) and torque rpm (trq_rpm) columns.
12. Merge the city mpg (mpg_c) and highway mpg (mpg_h) columns.
13. Set custom labels for specific columns.
14. Format the MSRP column as currency in USD.
15. Center align specific columns.
16. Apply a specific text style to certain columns.
17. Apply a data-driven color scale to the MSRP column.
18. Add a title and subtitle to the table.
19. Add a footnote to clarify what MSRP stands for.
20. Add a footnote to the most expensive car, noting that electric cars used to be expensive.
21. Add a source note to cite the source of the data.
22. Apply a theme to the table for a more polished look.


## DT Tables

When you need to present data to important stakeholders, static HTML tables can sometimes fall short. The `DT` package in R can be a great solution for this, as it lets you include interactive tables in your reports or analyses. `DT` is an interface to the JavaScript library DataTables, which is a plug-in for the jQuery JavaScript library. It's a flexible tool for displaying data in tables, with lots of customization options. Unlike the `gt` package, which is designed more for creating tables ready for publication, `DT` is really about making tables interactive for better data exploration.

The `DT` package lets you sort, filter, and paginate tables, which is really useful when you're dealing with larger datasets. It also has features like filters for individual columns, and the ability to hide or rearrange columns. Plus, there are several options for how you present your data. We'll show you how to use the `DT` package to create a table with a dataset of German automobiles in the next section.


```{r}
# Load the necessary libraries
library(DT)
library(dplyr)

# Filter the gtcars dataset for German cars only 
german_cars <- gt::gtcars %>%
  dplyr::filter(ctry_origin == "Germany") # <1>

# Display the data as a DT table
datatable(
  german_cars, # <2>
  extensions = 'Buttons', # <3>
  options = list(
    dom = 'Bfrtip', # <4>
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'), # <5>
    pageLength = 5, # <6>
    autoWidth = TRUE, # <7>
    order = list(list(1, 'asc')), # <8>
    lengthMenu = list(c(5, 10, 15, -1), c('5 rows', '10 rows', '15 rows', 'Show all')), # <9>
    searchHighlight = TRUE, # <10>
    searching = TRUE, # <11>
    lengthChange = TRUE # <12>
  )
)
```
1. Filter the `gtcars` dataset to include only cars that originate from Germany.
2. Pass the `german_cars` dataframe to the `datatable` function to display it as a DT table.
3. Enable the `Buttons` extension, which adds various functionalities to the table.
4. The `dom` option is used to define the table control elements to be displayed on the page and their order.
5. Add buttons to the table that allow for various actions, such as copying the table data and exporting it in different formats.
6. Set the number of rows to be displayed per page.
7. Automatically adjust the column width to the content.
8. Set the initial sorting order for the table.
9. Specify the options for the "entries per page" dropdown and their display text.
10. Highlight any text in the table that matches the filter.
11. Enable the ability to filter data in the table.
12. Allow the user to change the number of entries shown per page.


- **Extensions**: The `Buttons` extension has been enabled which adds buttons to the table for various actions, such as copy, csv, excel, pdf, and print.
- **dom**: The `dom` option defines the table control elements to appear on the page and in what order. The value `'Bfrtip'` means Buttons, filtering input, information summary, table, and pagination controls respectively.
- **autoWidth**: This option will adjust the column widths automatically to the content.
- **order**: This option sets the initial sorting order for the table. It takes a list where each element is a list containing a column index and a sort direction ('asc' for ascending and 'desc' for descending).
- **lengthMenu**: This option specifies the options for entries per page dropdown and their display text.
- **searchHighlight**: When this option is set to `TRUE`, any text in the table that matches the filter will be highlighted.
- **searching**: This option enables or disables the ability to filter data in the table.
- **lengthChange**: This option allows or disallows the user from changing the number of entries shown per page.

With these options, you can customize your `DT` tables to fit your exact needs.