---
title: "Color Data"
editor: visual
warning: false 
message: false 
error: false
format:
  html:
    code-fold: true
    code-summary: "Show the code"
  latex:
    echo: false 
---

```{r}
#| include: false
source("../scripts/knitr-minted-listed-hook.r")
```


Color plays an essential role in data visualization. It holds the power to stir emotions, highlight patterns, and convey information that may otherwise be challenging to communicate. For instance, in the U.S., red is often associated with danger or passion, blue with tranquility or sadness, and green with nature or health. Keep in mind that the cultural interpretations of colors vary, so color usage should be adjusted based on your audience's perspective. The impact of color is considered so significant that since 1979, the locker room at Iowa's Kinnick Stadium has been painted pink with the goal of lowering opponents' testosterone levels.

A skillful application of color in data visualization can enhance a viewer's understanding and engagement with the data, while inappropriate use may hide important details and lead to confusion. This discussion will guide you through the creation of various color schemes and palettes.
 
## Emphasizing Significant Details

```{r include = FALSE}
library("tidyverse")
library("gapminder")
# devtools::install_github("https://github.com/cran/colortools")
library("colortools")
library("patchwork")
library("gridGraphics")
library("grid")
library("ggplotify")
library("directlabels")
```

```{r message=FALSE}
gapminder1997eu <- gapminder %>% filter((year == 1997) & (continent == "Europe"))
continents <- gapminder %>%
  select(-country) %>%
  mutate(gdp = gdpPercap * pop) %>%
  group_by(year, continent) %>%
  summarize(total_pop_mil = sum(pop) / 10^6, total_gdp = sum(gdp), total_gdppc = total_gdp / (total_pop_mil * 10^6)) %>%
  ungroup()
malay_miracle <- gapminder %>% filter(country %in% c("Malaysia", "Vietnam", "Indonesia", "Thailand"))
asian_tigers <- gapminder %>%
  filter(country %in% c("Hong Kong, China", "Taiwan", "Singapore", "Korea, Rep.")) %>%
  mutate(country = recode(country, "Hong Kong, China" = "Hong Kong", "Korea, Rep." = "South Korea"))
```

Color is employed to underscore specific data and provide context. Consider the two graphs below, both of which compare the GDP of European countries in 1997. The first graph assigns each country a distinct color, resulting in a visual cacophony akin to an "explosion at a candy factory". The second graph improves upon this by minimizing distractions. It highlights "Greece" and greys out the remaining countries. The use of "red" for Greece serves as a signal, hinting that its economic performance may be subpar.

```{r warning=FALSE}
#| label: fig-gdp_eu_color
p1 <- gapminder1997eu %>%
  mutate(is.Greece = country == "Greece") %>%
  ggplot(aes(y = fct_reorder(country, gdpPercap), x = gdpPercap)) +
  geom_segment(aes(yend = country, xend = 0, color = country), size = 1, show.legend = FALSE) +
  geom_point(aes(color = country), show.legend = FALSE, size = 3) +
  theme_minimal(base_size = 12) +
  theme(
    panel.grid.major.y = element_blank(),
    panel.grid.minor = element_blank()
  ) +
  # ggplot2::scale_color_manual(values = c("#7286D3","#D37286")) +
  labs(x = "GDP per Capita", y = element_blank()) +
  coord_cartesian(expand = FALSE, clip = "off")
p2 <- gapminder1997eu %>%
  mutate(is.Greece = country == "Greece") %>%
  ggplot(aes(y = fct_reorder(country, gdpPercap), x = gdpPercap)) +
  geom_segment(aes(yend = country, xend = 0, color = is.Greece), size = 1, show.legend = FALSE) +
  geom_point(aes(color = is.Greece), show.legend = FALSE, size = 3) +
  theme_minimal(base_size = 12) +
  theme(
    panel.grid.major.y = element_blank(),
    panel.grid.minor = element_blank()
  ) +
  ggplot2::scale_color_manual(values = c("grey", "#D37286")) +
  labs(x = "GDP per Capita", y = element_blank()) +
  coord_cartesian(expand = FALSE, clip = "off")
p1 + p2 + plot_annotation(title = "Countries in Europe by GDP per Capita", theme = theme(plot.title = element_text(size = 16)))
```

## Comparing Two Things

```{r include=FALSE, eval = TRUE}
### Run this in console!
color <- "#DA70D6"
to_ggplot <- function(graph, aspect.ratio = 0.8) {
  as.ggplot(graph) + theme(aspect.ratio = aspect.ratio)
}
make_pie_chart <- function(colors, colors_wheel, annotation = FALSE) {
  rotation <- 180 / length(colors_wheel) / (180 / pi)
  colors_wheel[!colors_wheel %in% colors] <- "#F2F2F2"
  as.tibble(colors_wheel) %>%
    tibble::rowid_to_column() %>%
    ggplot(aes(y = 1, x = 1, group = rowid)) +
    geom_col(aes(fill = value),
      width = 1, color =
        "white"
    ) +
    scale_fill_identity() +
    coord_polar("y", start = rotation) +
    {
      if (annotation) {
        geom_text(
          aes(
            y = rowid - 0.5,
            label = value
          ),
          nudge_x = 1,
          color = "grey"
        )
      }
    } +
    theme_void() +
    theme(legend.position = "none")
}
colors_wheel <- invisible(colortools::wheel(color = color, num = 12))
wheel <- make_pie_chart(colors_wheel, colors_wheel)
analogous <- make_pie_chart(analogous(color, plot = FALSE), colors_wheel)
triadic <- make_pie_chart(triadic(color, plot = FALSE), colors_wheel)
complementary <- make_pie_chart(complementary(color, plot = FALSE), colors_wheel)
splitComp <- make_pie_chart(splitComp(color, plot = FALSE), colors_wheel)
tetradic <- make_pie_chart(tetradic(color, plot = FALSE), colors_wheel)
square <- make_pie_chart(square(color, plot = FALSE), colors_wheel)
sequential <- make_pie_chart(sequential(color, plot = FALSE), colors_wheel)

# sequential(color)
# grid.echo()
# sequential <- to_ggplot(grid.grab())
# pizza_colors <- c( "#F2F2F2", "#F2F2F2", "#F2F2F2", "#F2F2F2", "#A1DA70", "#F2F2F2", "#70DAA9", "#F2F2F2", "#F2F2F2", "#F2F2F2", "#F2F2F2","#DA70D6")
# pizza_colors_labcol <- c("black", "#F2F2F2", "#F2F2F2", "#F2F2F2", "#F2F2F2", "black", "#F2F2F2", "black", "#F2F2F2", "#F2F2F2", "#F2F2F2", "#F2F2F2")
# pizza(colors = pizza_colors, labcol = pizza_colors_labcol, bg = "white", border = "white")
# grid.echo()
# complementary_3 <- to_ggplot(grid.grab())
complementary_3 <- make_pie_chart(c("#A1DA70", "#70DAA9", "#DA70D6"), colors_wheel)

malay_colors <- c("#F2F2F2", "#F2F2F2", "#F2F2F2", "#F2F2F2", "#A1DA70", "#70DA74", "#70DAA9", "#F2F2F2", "#F2F2F2", "#F2F2F2", "#F2F2F2", "#DA70D6")
malay_labcol <- c("black", "#F2F2F2", "#F2F2F2", "#F2F2F2", "#F2F2F2", "black", "black", "black", "#F2F2F2", "#F2F2F2", "#F2F2F2", "#F2F2F2")
# pizza(colors = malay_colors, labcol = malay_labcol, bg = "white", border = "white")
# grid.echo()
complementary_4 <- make_pie_chart(c("#A1DA70", "#70DA74", "#70DAA9", "#DA70D6"), colors_wheel)
```

### Complementary Harmony with a Positive/Negative Connotation


Complementary Harmony involves the use of colors directly opposite each other on the color wheel, creating a stark contrast. This method effectively conveys a positive/negative connotation, ideal for emphasizing differences. While colors located near each other on the wheel can also complement each other, those placed in opposition offer the most substantial reinforcement for a key color. The illustration below compares the population growth of Asia and Europe. Here, the use of bright purple underscores the remarkable population surge in Asia, while the green tone underlines the comparatively slower growth in Europe.


```{r}
#| label: fig-complementary_posneg
#| fig-cap: Complementary Harmony with a Positive/Negative Connotation


p3 <- continents %>%
  filter(continent %in% c("Asia", "Europe")) %>%
  ggplot(aes(x = year, y = total_pop_mil, color = continent)) +
  geom_line(linewidth = 1.5) +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_y_log10() +
  scale_color_manual(values = c("#DA70D6", "#70DA74")) +
  geom_dl(aes(label = continent), method = "smart.grid") +
  labs(x = element_blank(), y = "Population in Millions (log10)")

complementary + p3 + plot_annotation(theme = theme(plot.title = element_text(size = 16)))
```

### Near Complementary Harmony for Highlighting Two Series Where One Is the Primary Focus

Near Complementary Harmony is a color scheme that achieves substantial contrast without resorting to using colors diametrically opposite on the color wheel. Instead, it involves choosing a color located 33% around the wheel from the principal color, rather than a full 50% away. This method is effective when highlighting two series, one of which is the primary focus. It's preferable to use warm colors for the key series and cool colors for the complementary ones. If required, the intensity of the complementary colors can be subdued by reducing their saturation or modifying their lightness, thereby lowering the contrast with the background. The example below underscores the significance of Asia's population growth, while Europe is neutrally depicted as a comparative reference, not a region with slow growth.

```{r}
#| label: fig-complementary_prim
#| fig-cap: "Near Complementary Harmony for Highlighting \nTwo Series Where One Is the Primary Focus"

p4 <- continents %>%
  filter(continent %in% c("Asia", "Europe")) %>%
  ggplot(aes(x = year, y = total_pop_mil, color = continent)) +
  geom_line(size = 1.5) +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_y_log10() +
  scale_color_manual(values = c("#DA70D6", "#70D6DA")) +
  geom_dl(aes(label = continent), method = "smart.grid") +
  labs(x = element_blank(), y = "Population in Millions (log10)")
triadic + p4 + plot_annotation(theme = theme(plot.title = element_text(size = 16)))
```

<!-- ## Color Palettes for Comparing Three Things -->

### Analogous/Triadic Harmony for Highlighting Three Series


Analogous harmony is effective for making simple distinctions between categories by using a key color and its two neighboring colors on the color wheel. This method, while simple, allows the key color to stand out slightly more. It is great for showing equally important categories, for example, showing population growth without emphasizing any aspects of it.

```{r}
#| label: fig-analogous_eq
#| fig-cap: "Analogous Harmony for Highlighting Three Series"
p5 <- continents %>%
  filter(continent %in% c("Asia", "Europe", "Americas")) %>%
  ggplot(aes(x = year, y = total_pop_mil, color = continent)) +
  geom_line(size = 1.5) +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_y_log10() +
  scale_color_manual(values = c("#DA70D6", "#DA70A1", "#A970DA")) +
  geom_dl(aes(label = continent), method = "smart.grid") +
  labs(x = element_blank(), y = "Population in Millions (log10)")
analogous + p5 + plot_annotation(theme = theme(plot.title = element_text(size = 16)))
```

We have already introduced triadic harmony for the comparison of two categories. Here, triadic harmony can be used effectively to suggest a comparison between three continents. Remember that adjusting the tint of the colors can either increase or decrease emphasis as needed. Notice the difference in perception between analogous and triadic harmonies—what is it?


```{r}
#| label: fig-triadic_dif
#| fig-cap: "Triadic Harmony for Highlighting Three Series"
p5 <- continents %>%
  filter(continent %in% c("Asia", "Europe", "Americas")) %>%
  ggplot(aes(x = year, y = total_pop_mil, color = continent)) +
  geom_line(size = 1.5) +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_y_log10() +
  scale_color_manual(values = c("#DA70D6", "#D6DA70", "#70D6DA")) +
  geom_dl(aes(label = continent), method = "smart.grid") +
  labs(x = element_blank(), y = "Population in Millions (log10)")
triadic + p5 + plot_annotation(theme = theme(plot.title = element_text(size = 16)))
```



### Highlighting One Series Against Two Related Series

The Near Complementary Harmony color scheme is adept at highlighting one series against others. The following chart clearly emphasizes Asia's GDP, represented by a vibrant purple. Conversely, Europe and the Americas, depicted in harmonizing greens, play a more subsidiary role in this narrative.

```{r}
#| label: fig-near_complementary
#| fig-cap: "Highlighting One Series Against Two Related Series"
p6 <- continents %>%
  filter(continent %in% c("Asia", "Europe", "Americas")) %>%
  ggplot(aes(x = year, y = total_gdppc, color = continent)) +
  geom_line(size = 1.5) +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_y_log10() +
  scale_color_manual(values = c("#A1DA70", "#DA70D6", "#70DAA9")) +
  geom_dl(aes(label = continent), method = "smart.grid") +
  labs(x = element_blank(), y = "GDP per Capita (log10)")
complementary_3 + p6 + plot_annotation(theme = theme(plot.title = element_text(size = 16)))
```

## Color Palettes for Comparing Four Things

### Analogous Complementary for One Main Series and Its Three Secondary

The Analogous Complementary scheme, involving four distinct colors, provides an excellent platform for highlighting a primary series along with three related components. With this scheme, the key color stands out due to the similarities among the three complementary colors. An illustration of this can be seen in the subsequent example showcasing the 'Malaysian Economic Miracle' alongside three neighboring countries.

```{r}
#| label: fig-one_main
#| fig-cap: "Analogous Complementary for One Main Series and \nIts Three Components"
p7 <- malay_miracle %>% ggplot(aes(x = year, y = gdpPercap, color = country)) +
  geom_line(linewidth = 1.5) +
  theme_minimal() +
  # scale_y_log10() +
  theme(legend.position = "none") +
  scale_color_manual(values = c("#A1DA70", "#DA70D6", "#70DA74", "#70DAA9")) +
  geom_dl(aes(label = country), method = "smart.grid") +
  labs(x = element_blank(), y = "GDP per Capita (log10)")
complementary_4 + p7 + plot_annotation( theme = theme(plot.title = element_text(size = 16)))
```

### Double Complementary for Two Pairs Where One Pair Is Dominant

The Double Complementary Harmony scheme is ideal for visualizing four data series divided into two distinct pairs. It involves the key color, an adjacent color, and their respective opposites on the color wheel. Warmer colors are suggested for the key and adjacent colors, with their complementary counterparts in cooler tones. This color arrangement effectively highlights one pair over the other. As demonstrated below, the 1952 GDPs of Switzerland and Norway form one group denoted in purple hues, while Bosnia and Albania, differentiated in green-blue, form the other group.

```{r}
#| label: fig-two_pairs
#| fig-cap: "Double Complementary for Two Pairs Where One Pair Is Dominant"
p8 <- gapminder %>%
  filter((continent == "Europe")) %>%
  mutate(bot_top = case_when(
    country %in% c("Albania") ~ "Albania",
    country %in% c("Bosnia and Herzegovina") ~ "Bosnia",
    country %in% c("Switzerland") ~ "Switzerland",
    country %in% c("Norway") ~ "Norway",
    T ~ "other"
  )) %>%
  ggplot(aes(x = year, y = gdpPercap, color = bot_top, group = country, alpha = bot_top)) +
  geom_line(linewidth = 1.5) +
  theme_minimal() +
  theme(legend.position = "none", legend.title = element_blank()) +
  scale_y_log10() +
  geom_dl(aes(label = bot_top), method = "smart.grid") +
  scale_color_manual(values = c("#70DA74", "#70D6DA", "#DA70D6", "grey", "#DA7470")) +
  scale_alpha_manual(values = c(1, 1, 1, 0.3, 1)) +
  labs( # title = "Growth of the bottom 2 and \ntop 2 countries by GDP in 1952",
    x = element_blank(), y = "GDP per Capita (log10)"
  )
tetradic + p8 + plot_annotation( theme = theme(plot.title = element_text(size = 16)))
```

### Rectangular or Square Complementary for Four Series of Equal Emphasis

The Rectangular or Square Complementary scheme suits data visualization of four series with equal emphasis. Differing from the double complementary scheme, it includes the key color, its complement, and two additional colors to form a rectangle or square on the color wheel. This results in distinctive colors for each of the four series. While similar to double complementary, this scheme is optimal when all series share equal importance. For instance, in the graph below, the "Four Asian Tigers"—Hong Kong, Singapore, South Korea, and Taiwan—are shown. These economies, rapidly developed from the 1960s to 1990s, are all equally significant in illustrating the dynamism of East Asia's growth.

```{r}
#| label: fig-four_equal
#| fig-cap: "Rectangular or Square Complementary for \nFour Series of Equal Emphasis"
p9 <- asian_tigers %>% ggplot(aes(x = year, y = gdpPercap, color = country)) +
  geom_line(linewidth = 1.5) +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_y_log10() +
  scale_color_manual(values = c("#DA70D6", "#DAA970", "#70DA74", "#70A1DA")) +
  geom_dl(aes(label = country), method = "smart.grid") +
  labs(x = element_blank(), y = "GDP per Capita (log10)")
square + p9 + plot_annotation( theme = theme(plot.title = element_text(size = 16)))
```

## Sequential and Divergent

### Sequential

Sequential colors utilize a gradient from light to dark, mapping numeric values based on hue or lightness. Depending on the background, lower values receive lighter colors, while higher ones get darker shades. You can use a single hue or a sequence thereof.

Let's apply our beloved purple to visualize COVID-19 deaths per 100,000 population in the United States[^Data from https://covid.cdc.gov/covid-data-tracker/#maps_deaths-rate-total]. 
With gray representing the minimum and vibrant purple indicating the maximum, can you identify the state with the fewest and most deaths? Is it easy for you to match the color to the corresponding value?

```{r}
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("maps")
world <- ne_countries(scale = "medium", returnclass = "sf") %>% mutate(gdppc = gdp_md_est)
```

```{r include = FALSE}
sequential <- tibble(n = 1:15, colors = sequential(color, 7) %>% as.ordered() %>% fct_rev()) %>% ggplot(aes(x = n, fill = colors)) +
  geom_bar() +
  scale_fill_identity() +
  theme_void()

divergent <- tibble(colors = 1:15) %>% ggplot(aes(x = colors, fill = colors, group = colors)) +
  geom_bar() +
  scale_fill_gradient(low = "#7470DA", high = "#D6DA70") +
  theme_void() +
  theme(legend.position = "none")

viridis <- tibble(colors = 1:15) %>% ggplot(aes(x = colors, fill = colors, group = colors)) +
  geom_bar() +
  scale_fill_viridis_c(option = "D") +
  theme_void() +
  theme(legend.position = "none")

states <- map_data("state")
covid <- read_csv("data/covid_states.csv")

data_for_map <- states %>%
  left_join(mutate(covid, state = tolower(state)), 
            by = join_by(region == state)) 

map_theme <- function(object) {object +
    geom_polygon(color = "white", ) +
  theme_minimal() +
  theme(legend.position  = "top",
        legend.title = element_blank(),
        legend.key.width = unit(100,units = "native"),
        axis.title = element_blank(),
        axis.text = element_blank(),
        panel.grid = element_blank()) 
}

p10 <- data_for_map %>%
  ggplot(aes(x = long, y = lat, group = group, fill = total_death_rate_per_10e5)) +
  geom_polygon(color = "white") +
  scale_fill_gradient(low = "#DADADAFF", high = "#DA00D2FF", 
                      # limits = c(0, NA)
                      ) +
  labs(title = "COVID-19 Total Death Rate Per 100,000")
p10 <- map_theme(p10)
  
p11 <- ggplot(data = data_for_map,
         aes(x = long, y = lat,
             group = group,
             fill = scale(total_death_rate_per_10e5))) +
  scale_fill_gradient(low = "#7470DA", high = "#D6DA70", limits = c(-3, 3)) +
  labs(title = "COVID-19 Total Death Rate Scaled",
       subtitle = "Standard Deviation Units")
p11 <- map_theme(p11)

p12 <- data_for_map %>%
  ggplot(aes(x = long, y = lat, group = group, fill = total_death_rate_per_10e5)) +
  labs(title = "COVID-19 Total Death Rate Per 100,000") +
  scale_fill_viridis_c(option = "D")  
p12 <- map_theme(p12)
```

```{r}
#| label: fig-sequential
p10
```



### Divergent

Diverging color schemes are employed when the numeric variable possesses a significant central value like zero. This scheme combines two sequential palettes with a common end, centering on the central value. Positive values receive colors from one side of the spectrum, while negative ones are designated colors from the other. The central value should ideally be a light shade, allowing darker colors to signify greater deviation from the center. Simplicity is key here to prevent diluting the intended meaning and confusing viewers. 

Let's scale our numbers so that they represent standard deviation as a value. Notice how states with significantly fewer deaths are blue and states with significantly more deaths are yellow, while states with numbers close to the average are a grayish color. Do you find it easy to identify states that are close to the mean (0 standard deviations away)?

```{r}
#| label: fig-divergent
p11
```

### Prebuilt

Prebuilt color scales such as "Viridis" are crafted for perceptual uniformity, ensuring visual appeal and ease of interpretation. These provide a standard, uniform color scheme, thus obviating the need for custom creation and testing. Moreover, they aid individuals with color blindness in interpreting data visualizations, owing to their consistent visual contrast. By employing prebuilt color scales, data visualizations can be made accessible to a broad audience. Do you find it easier to match the colors to values and to group together states with similar values?

```{r}
#| label: fig-prebuilt
p12
```

## Summary

This chapter has explored the strategic use of color schemes for organizing and presenting data effectively. Whether subtly distinguishing between categories or boldly contrasting them, the right application of color can make data more accessible and insightful. In the next chapter, we will learn about color systems and their strengths.
