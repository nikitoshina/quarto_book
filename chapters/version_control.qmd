---
title: "Version Control with Git and Github"
editor: visual
---

## Version Control

Imagine you're working on a crucial research paper or a script for an important presentation. You've spent hours perfecting it, and it's almost complete. Then, you suddenly realize you liked the version you had two days ago better, but you've already overwritten it. Or, even worse, your computer crashes, and you lose all your progress. Panic ensues!

Fear not, version control is here to save the day! Think of version control as a superhero that helps you keep track of every change you make to your documents, code, or data files. It's like having a time machine that allows you to travel back to any point in your project's history and recover any previous version of your work. Sounds magical, right?

Here's how version control works:

1.  **Snapshots**: Every time you save your work, version control takes a snapshot, preserving that particular version. You can add a short message to each snapshot, describing the changes you made, making it easier to remember what you did.

2.  **Branching**: Want to try out a bold new idea, but afraid it might not work? No problem! With version control, you can create a separate "branch" and experiment without affecting the main version. If your idea works, you can "merge" the changes back into the main branch. If not, just discard the experimental branch and pretend it never happened.

3.  **Collaboration**: Working with a team? Version control makes collaborating a breeze. Each team member can work on their part of the project, and the superhero will intelligently combine all the changes into a cohesive whole. No more messy email chains with countless attachments and confusing file names like "Final_Version_3\_revised_edited_FINAL."

4.  **Backup**: Version control also acts as a backup system, ensuring your work is safely stored in a remote location. So even if your computer decides to give up on you, your project remains secure and accessible.

## Git and Github

When introducing GitHub to beginning economists as a version control and collaboration tool, you should cover the following key points:

1.  What is GitHub?

    -   Explain that GitHub is a web-based platform built on Git, a distributed version control system.

    -   Mention that it allows users to create, manage, and collaborate on repositories (projects) in an organized and efficient manner.

2.  Why use GitHub for version control?

    -   Emphasize the importance of version control for tracking changes in code, data, and documents.

    -   Discuss how GitHub helps avoid conflicts and overwriting each other's work when multiple people are collaborating on a project.

    -   Explain that GitHub maintains a complete history of changes, making it easy to revert to previous versions if needed.

3.  Basic GitHub terminology:

    -   Repository: A project folder containing all files and their history.

    -   Clone: Creating a local copy of a repository on your computer.

    -   Commit: Saving changes to a file or a set of files in the repository.

    -   Push: Uploading local commits to the remote repository on GitHub.

    -   Pull: Updating your local repository with the latest changes from the remote repository.

    -   Branch: A separate version of the repository, often used to work on a specific feature or bugfix.

    -   Merge: Combining changes from different branches into a single branch.

    -   Pull request: Requesting that changes from one branch be merged into another branch, typically used for collaboration and code reviews.

4.  Getting started with GitHub:

    -   Signing up for a GitHub account.

    -   Creating and cloning repositories.

    -   Making changes, committing, and pushing to the remote repository.

    -   Collaborating with others by inviting collaborators, creating branches, and using pull requests.

5.  GitHub integrations and tools:

    -   Explain that GitHub can be integrated with various tools and platforms, such as continuous integration services, project management tools, and code editors.

    -   Introduce GitHub Desktop, a graphical user interface for managing repositories, as an alternative to using the command line.

6.  Practical examples for economists:

    -   Share examples of how economists can use GitHub for managing research papers, data analysis scripts (e.g., in R or Python), and teaching materials.

    -   Discuss how GitHub can facilitate collaboration among researchers, making it easier to share and reproduce research findings.

By introducing these key points, you will provide beginning economists with a solid foundation for understanding and using GitHub for version control and collaboration in their projects.
