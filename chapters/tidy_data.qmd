---
title: "Tidy Data"
editor: visual
---

```{r include = F}
library(tidyverse)
knitr::opts_chunk$set(echo = T, warning = F, message = F, error = F)
```
```{r}
data_raven <- readr::read_csv("https://raw.githubusercontent.com/nikitoshina/ECON-623-Lab-2023/main/data/mexico_sample_data.csv?token=GHSAT0AAAAAAB5WTPULI26TZP545VNUFQE6Y6O4XVA") %>% select(id, mean_temp_celsius, gender, pr_correct, tr_correct, ch_tournament, ch_correct)
```
```{css, echo = FALSE}
.output {
max-height: 300px;
overflow-y: scroll;
}
```
Tidy data is a standard way of structuring a dataset to streamline its usability. This standard, as popularized by Hadley Wickham [@wickhamTidyData2014], depends on the organization of rows, columns, and tables, and how they correspond to observations, variables, and types.

In the context of Tidy Data:

1. Each variable is represented by a column.
2. Each observation is represented by a row.
3. Each type of observational unit is represented by a table.

    > What changes put it in a column

Data commonly takes two formats: wide and long.

Wide data, also referred to as unstacked data, is structured so that each row represents an individual unit of observation, and each column represents a variable. This format is often employed when the number of variables is relatively small, and they don't share hierarchical relationships. This format is common in reports, where its readability excels. A notable example of wide data is a panel where columns correspond to years [@tbl-widepanel].

In contrast, long data, also known as stacked data, is organized so that each row represents a single observation of a variable, with columns representing the variable and the unit of observation identifier. This format is usually employed when the number of variables is large or they are hierarchically related. You'll often find that working with long data is much more manageable for conducting analyses.

::: {#tbl-panel layout-ncol="2"}
| **Country** | **2020** | **2021** |
|-------------|----------|----------|
| USA         | 329.5    | 331.9    |
| Russia      | 144.1    | 143.4    |
| Mexico      | 126      | 126.7    |

: Wide Format {#tbl-widepanel}

| **Country** | **Year** | **Population** |
|-------------|----------|----------------|
| USA         | 2020     | 329.5          |
| Russia      | 2020     | 144.1          |
| Mexico      | 2020     | 126            |
| USA         | 2021     | 331.9          |
| Russia      | 2021     | 143.4          |
| Mexico      | 2021     | 126.7          |

: Tidy Long Format {#tbl-longpanel}

Panel Data
:::

From the first example, one might think that long and tidy data are synonyms. Let's consider another example where we wish to make our data wider. In @tbl-across2, each observation—which comprises a country, its population, and birth rate—is spread across two rows. In this case, we aim to widen our data.

::: {#tbl-widen layout-ncol="2"}
| Country | Name       | Value |
|---------|------------|-------|
| USA     | Population | 329.5 |
| Russia  | Population | 144.1 |
| Mexico  | Population | 126   |
| USA     | Birth Rate | 1.64  |
| Russia  | Birth Rate | 1.5   |
| Mexico  | Birth Rate | 1.9   |

: Across Two Rows {#tbl-across2}

| Country | Population | Birth Rate |
|---------|------------|------------|
| USA     | 329.5      | 1.64       |
| Russia  | 144.1      | 1.5        |
| Mexico  | 126        | 1.9        |

: Tidy Wide {#tbl-tidywide}

Messy Long
:::

Another common issue with messy data occurs when two variables are combined into one column, as seen in @tbl-gathered, where 'Year' and 'Population' are in the same column. These need to be separated into two distinct columns: 'Year' and 'Population'.

::: {#tbl-gathersplit layout-ncol="2"}
| **Country** | **Year/Population** |
|-------------|---------------------|
| USA         | 2020/329.5          |
| Russia      | 2020/144.1          |
| Mexico      | 2020/126            |
| USA         | 2021/331.9          |
| Russia      | 2021/143.4          |
| Mexico      | 2021/126.7          |

: United Year/Population {#tbl-gathered}

| Country | Year | Population |
|---------|------|------------|
| USA     | 2020 | 329.5      |
| Russia  | 2020 | 144.1      |
| Mexico  | 2020 | 126        |
| USA     | 2021 | 331.9      |
| Russia  | 2021 | 143.4      |
| Mexico  | 2021 | 126.7      |

: Tidy Split into Columns {#tbl-split}

Separate Data
:::

## Example

Tidy data is more than a theoretical concept; it has practical implications for data structuring. Consider this example of storing data on experiment payments:

![](https://lh5.googleusercontent.com/-jiqGFe0IZ7aF-uZuBOtjJ0h1jo-eH8A1EZx2L1FUkn75IHZWGKm21ORwlu7q4IVvcJBFB9KTX6GsbYqV5OOLnh2Sx4aFum8pY51Om42eDmhCFb3MlCEN-lS6dX2YGDlbmSp7wK7s7OKlaVYOYhPCC9iIrYRD0LUufyWA1sFMmSiBfrPswF3-seDmBHQLE7S=s2048)

When a computer reads this data, it can't understand our intent, so all columns are read as-is. Adding multiple days necessitates creating similar tables, increasing the chances of errors. Want a total for the entire experiment? We'd have to manually sum all cells. Now, compare this to:

![](https://lh3.googleusercontent.com/QMtTgnjVqzEU5eBFhmpdyc7KhTgYAM-_fr3NiusczaGi6Mf_pWV6PSjiyXL6vem_fFaJVeLZUfE3_cdCgk7F2yF2D46_Rmk94mcvmxLisJ4NBI-L1fb5OwQpEI5unpWC47BR6r2sI9nVCHwA6lA4PAMb65Bs_otyp2FfnPxJ2FnVZG1MvZ2pwlA5Pfpvra5X=s2048)

In this format, data input is straightforward, and generating summary tables is as simple as creating a pivot table. A tidy data approach from the outset aids in creating robust tables and saves time during analysis.

## `pivot_longer()`

A common problem arises in datasets where column names are not variable names, but *values* of a variable. This is the case for `pr_correct`, `tr_correct`, `ch_correct`, where the column names represent the `game` variable's name. Meanwhile, the values in the columns represent the number of correct answers, and each row denotes two observations, not one.

To tidy such a dataset, we need to pivot the problematic columns into a new pair of variables. This operation requires:

1.  The columns whose names are values, not variables—columns we want to pivot. In this case, `pr_correct`, `tr_correct`, `ch_correct`.
2.  The name of the variable where we'll move the column names. Here, it's `game`. The default is `name`.
3.  The name of the variable where we'll move the column values. Here, it's `n_correct`. The default is `value`.

```{r}
data_raven %>%
  pivot_longer(c(pr_correct, tr_correct, ch_correct), names_to = "game", values_to = "n_correct") %>%
  select(id, game, n_correct) %>%
  head(n = 5)
```

## `pivot_wider()`

`pivot_wider()` is the opposite of `pivot_longer()`. It is used when an observation is scattered across multiple rows. For instance, consider the `data_raven_accident` dataset, where `mean_temp_celsius` and `ch_tournament` are stacked. In this case, an observation is spread across two rows.

```{r echo=FALSE}
data_raven_accident <- data_raven %>%
  select(id, mean_temp_celsius, ch_tournament) %>%
  pivot_longer(-id)
```

```{r}
data_raven_accident %>% head(n = 5)
```

To tidy this up, we need two parameters:

1.  The column to take variable names from. Here, it's `name`.
2.  The column to take values from. Here it's `value`.

```{r}
data_raven_accident %>%
  pivot_wider(names_from = name, values_from = value) %>%
  head(n = 5)
```

It is evident from their names that `pivot_wider()` and `pivot_longer()` are inverse functions. `pivot_longer()` converts wide tables to a longer and narrower format, while `pivot_wider()` converts long tables to a shorter and wider format.

## `separate()` and `unite()`

Sometimes, data may come with columns united, necessitating us to `separate()` them to maintain tidy data.

```{r include = F}
data_raven_sep <- data_raven %>%
  select(id, gender, pr_correct) %>%
  unite("gender/pr_correct", c(gender, pr_correct), sep = "/")

data_raven_uni <- data_raven %>%
  select(id, gender) %>%
  mutate(site_id = str_sub(id, start = 1, end = 3), session_n = str_sub(id, start = 4, end = 6), subject_n = str_sub(id, start = 7, end = 9)) %>%
  select(-id) %>%
  relocate(gender, .after = subject_n)
```

```{r}
data_raven_sep %>% head(n = 5)
```

```{r}
data_raven_sep %>%
  separate(col = "gender/pr_correct", into = c("gender", "pr_correct"), sep = "/") %>%
  head(n = 5)
```

What if we have one column that has been split across multiple columns? Consider a situation where our subject ID code, composed of site_id, session_n, and subject_n, has been broken down into three separate columns. In such a scenario, we would need to unite() these columns back into one.

```{r}
data_raven_uni %>% head(n = 5)
```

```{r}
data_raven_uni %>%
  unite(c(site_id, session_n, subject_n), col = "id", sep = "") %>%
  head(n = 5)
```

## `tibble()` and `tribble()`

A tibble is a special kind of data frame in R. Tibbles are a modern re-imagining of the data frame, designed to be more friendly and consistent than traditional data frames. To create a tibble, we can use `tibble()`, similar to `data.frame()`. Here are some features that make tibbles unique:

-   Like data frames, tibbles can hold tabular data, but they have some key differences.

-   By default, tibbles display only the first 10 rows when printed, making them easier to work with large datasets.

-   They use a consistent printing format, making it easier to work with multiple tibbles in the same session.

-   Tibbles have a consistent subsetting behavior, making it easier to select columns by name. When printed, the data type of each column is specified.

-   Subsetting a tibble will always return a tibble, so you don't need to use `drop = FALSE`, as you would with traditional data frames.

-   Most importantly, tibbles can have columns that consist of lists.

In summary, Tibbles are a more modern and consistent version of data frames. They are less prone to errors and more readable, making them an excellent choice for data manipulation and exploration tasks.

```{r}
tibble(
  x = c(1, 2, 3),
  y = c("one", "two", "three")
)
```

You can also use `tribble()` to create a row-wise, readable tibble in R. This is especially useful when creating small tables of data. The syntax is as follows: `tribble(~column1, ~column2)`, where the Row column --- represents the data in a row by row layout.

```{r}
tribble(
  ~x, ~y,
  1, "one",
  2, "two",
  3, "three"
)
```

## `janitor`: Clean Your Data

The `janitor` package is designed to make the process of cleaning and tidying data as simple and efficient as possible. To learn more about the functions it provides, check out [this vignette](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html)! If you are interested in creating summary tables with `janitor`, refer to [this vignette](https://cran.r-project.org/web/packages/janitor/vignettes/tabyls.html)!

### `clean_names()`

The `clean_names()` function is used to clean variable names, especially those read in from Excel files using `readxl::read_excel()` and `readr::read_csv()`. It parses letter cases, separators, and special characters into a consistent format, converts certain characters like "%" to "percent" and "#" to "number" to retain meaning, and resolves issues of duplicate or empty names. It is recommended to call this function every time data is read.

```{r}
# Create a data.frame with dirty names
test_df <- as.data.frame(matrix(ncol = 6))
names(test_df) <- c(
  "camelCase", "ábc@!*", "% of respondents (2009)",
  "Duplicate", "Duplicate", ""
)
test_df %>% colnames()
```

```{r}
library(janitor)
test_df %>%
  clean_names() %>%
  colnames()
```

### `remove_empty()`

`remove_empty()` removes empty rows and columns, which is especially useful after reading Excel files.

```{r}
test_df2 <- data.frame(
  numbers = c(1, NA, 3),
  food = c(NA, NA, NA),
  letters = c("a", NA, "c")
)
test_df2
test_df2 %>%
  remove_empty(c("rows", "cols"))
```

### `remove_constant()`

`remove_constant()` drops columns from a data.frame that contain only a single constant value (with an na.rm option to control whether NAs should be considered as different values from the constant).

```{r}
test_df3 <- data.frame(cool_numbers = 1:3, boring = "the same")
test_df3
test_df3 %>% remove_constant()
```

### `convert_to_date()` and `convert_to_datetime()` 

Do you remember loading data from Excel and seeing `36922.75` instead of dates? Well, `convert_to_date()` and `convert_to_datetime()` will convert this format and other date-time formats to actual dates! If you need more customization, check `excel_numeric_to_date()`.

```{r}
convert_to_date(36922.75)
convert_to_datetime(36922.75)
```

### `row_to_names()` 

`row_to_names()` is a function that takes the names of variables stored in a row of a data frame and makes them the column names of the data frame. It can also remove the row that contained the names, and any rows above it, if desired.

```{r}
test_df4 <- data.frame(
  x_1 = c(NA, "Names", 1:3),
  x_2 = c(NA, "Value", 4:6)
)
test_df4
row_to_names(test_df4, 2)
```
