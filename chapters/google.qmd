---
title: Google Services in R
eval: false
---

```{r}
#| include: false
source("../scripts/knitr-minted-listed-hook.r")
```


This chapter delves into how we can integrate Google services with R, harnessing the flexibility of Google's tools to enhance our data collection and analysis.

## Constructing a Database in Google Sheets

Google Sheets is a versatile tool, easy to use, cloud-based, and capable of storing data from Google Forms. It's an excellent choice for data entry if your project involves physical data collection. By building a relational database in Sheets with multiple tabs, validation rules, and clear data entry instructions, you can streamline the process, minimize errors, and maintain meaningful variable names for later analysis.

Adopt a systematic naming framework like `question#_questionName_section` to facilitate easy access to required questions when creating your indexes.

### Common Use Cases of `googlesheets4`

`googlesheets4` is an R package that interacts with the Google Sheets API, offering a host of features to analysts and data scientists. Here are some common scenarios:

1. **Data Input:** Data is often input into Google Sheets by various people, thanks to its collaborative nature. `googlesheets4` allows you to pull this data directly into R.

2. **Real-Time Data Analysis:** If your data is continuously updated, `googlesheets4` allows real-time analysis by accessing and analyzing the latest data.

3. **Data Reporting:** Results from your analysis or model predictions can be written back to Google Sheets, making them accessible to non-technical stakeholders.

4. **Data Sharing:** Google Sheets makes data sharing easy. Your data can be accessed from anywhere, anytime.

### Reading and Writing Data in Google Sheets with R

With R, you can effortlessly read and write data from and to Google Sheets.

#### Reading from Google Sheets

To pull data from Google Sheets into R, use the `read_sheet()` function, providing the document's URL or identifier and the specific sheet name.

```{r}
library(googlesheets4)

url <- "https://docs.google.com/spreadsheets/d/your_spreadsheet_id_here"
data <- read_sheet(url, sheet = "Your Sheet Name")
head(data)
```

#### Writing to Google Sheets

Writing data back to Google Sheets is just as straightforward using the `write_sheet()` function.

```{r}
data_to_write <- data.frame(
  Column1 = c("Data1", "Data2"),
  Column2 = c("Data3", "Data4")
)

write_sheet(data = data_to_write, ss = url, sheet = "Your Sheet Name")
```

### Managing Secrets with `gargle`

The `gargle` package simplifies authentication with Google APIs and safely manages authentication tokens.

```{r}
options(gargle_oauth_cache = ".secrets")
gs4_auth()
list.files(".secrets/")
gs4_auth(cache = ".secrets", email="name@mail.com")
```

Using `gargle` enhances your workflow efficiency and security by storing tokens securely and simplifying re-authentication in future sessions.

### Google Drive and R

The `googledrive` package in R allows you to interact with Google Drive, making it easy to read, write, and manage files.

```{r}
library(googledrive)
drive_auth(cache = ".secrets_drive")
print(drive_ls())
file <- drive_get(path = "YourFileName")
data <- read_csv(drive_download(file, overwrite = TRUE))
```

To write files to Google Drive, save the file locally, then upload it using `drive_upload()`:

```{r}
data_to_write <- data.frame(
  Column1 = c("Data1", "Data2"),
  Column2 = c("Data3", "Data4")
)

write.csv(data_to_write, "data_to_write.csv")
drive_upload("data_to_write.csv", path = "FolderName/data_to_write.csv")
```

Remember to responsibly handle your files, especially those containing sensitive data.

#### Exploring Other Google Services

Numerous Google services like Google Maps, Google Earth, Google Cloud, and others are readily accessible from within R. A quick online search will reveal various resources for your projects, and there's likely a pre-existing R package to simplify your access.
