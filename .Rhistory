e_scatter(Sepal.Width, symbol_size = 10) %>% # <4>
e_x_axis(min = 1.5, max = 5, name = "Sepal Length") %>% # Add x-axis title
e_y_axis(min = 4, max = 8, name = "Sepal Width") %>% # Add y-axis title
e_tooltip(
trigger = 'item',
formatter = htmlwidgets::JS("
function(params){
return('Sepal Width: ' + params.value[0] + '<br />Sepal Length: ' + params.value[1])
}
")
) # <5>
# Display the plot
e_chart
# Load necessary package
library(echarts4r)
e_chart <- iris %>%
group_by(Species) %>% # <2>
e_charts(Sepal.Length) %>% # <3>
e_scatter(Sepal.Width, symbol_size = 10) %>% # <4>
e_x_axis(min = 1.5, max = 5) %>% # Limit x-axis
e_y_axis(min = 4, max = 8) %>% # Limit y-axis
e_axis_labels(
x = "Sepal Length",
y = "Sepal Width"
) %>%
e_tooltip(
trigger = 'item',
formatter = htmlwidgets::JS("
function(params){
return('Sepal Width: ' + params.value[0] + '<br />Sepal Length: ' + params.value[1])
}
")
) # <5>
# Display the plot
e_chart
e_chart <- iris %>%
group_by(Species) %>% # <2>
e_charts(Sepal.Length) %>% # <3>
e_scatter(Sepal.Width, symbol_size = 10) %>% # <4>
e_x_axis(min = 1.5, max = 5) %>% # Limit x-axis
e_y_axis(min = 4, max = 8) %>% # Limit y-axis
e_tooltip(
trigger = 'item',
formatter = htmlwidgets::JS("
function(params){
return('Sepal Width: ' + params.value[0] + '<br />Sepal Length: ' + params.value[1])
}
")
) # <5>
# Display the plot
e_chart
Width
e_chart <- iris %>%
group_by(Species) %>% # <2>
e_charts(Sepal.Length) %>% # <3>
e_scatter(Sepal.Width, symbol_size = 10) %>% # <4>
e_x_axis(min = 1.5, max = 5) %>% # Limit x-axis
e_y_axis(min = 4, max = 8) %>% # Limit y-axis
e_tooltip(
trigger = 'item',
formatter = htmlwidgets::JS("
function(params){
return('Sepal Width: ' + params.value[0] + '<br />Sepal Length: ' + params.value[1])
}
")
) # <5>
# Display the plot
e_chart
e_chart <- iris %>%
group_by(Species) %>% # <2>
e_charts(Sepal.Width) %>% # <3>
e_scatter(Sepal.Length, size = 4) %>% # <4>
e_tooltip(
trigger = 'item',
formatter = htmlwidgets::JS("
function(params){
return('Sepal Width: ' + params.value[0] + '<br />Sepal Length: ' + params.value[1])
}
")
) # <5>
# Display the plot
e_chart
e_chart <- iris %>%
group_by(Species) %>% # <2>
e_charts(Sepal.Width) %>% # <3>
e_scatter(Sepal.Length, symbol_size = 4) %>% # <4>
e_tooltip(
trigger = 'item',
formatter = htmlwidgets::JS("
function(params){
return('Sepal Width: ' + params.value[0] + '<br />Sepal Length: ' + params.value[1])
}
")
) # <5>
# Display the plot
e_chart
e_chart <- iris %>%
group_by(Species) %>% # <2>
e_charts(Sepal.Width) %>% # <3>
e_scatter(Sepal.Length, symbol_size = 4) %>% # <4>
e_x_axis(min = 1.5, max = 5) %>% # Limit x-axis
e_y_axis(min = 4, max = 8) %>% # Limit y-axis
e_tooltip(
trigger = 'item',
formatter = htmlwidgets::JS("
function(params){
return('Sepal Width: ' + params.value[0] + '<br />Sepal Length: ' + params.value[1])
}
")
) # <5>
# Display the plot
e_chart
e_chart <- iris %>%
group_by(Species) %>% # <2>
e_charts(Sepal.Width) %>% # <3>
e_scatter(Sepal.Length, symbol_size = 7) %>% # <4>
e_x_axis(min = 1.5, max = 5) %>% # Limit x-axis
e_y_axis(min = 4, max = 8) %>% # Limit y-axis
e_tooltip(
trigger = 'item',
formatter = htmlwidgets::JS("
function(params){
return('Sepal Width: ' + params.value[0] + '<br />Sepal Length: ' + params.value[1])
}
")
) # <5>
# Display the plot
e_chart
# Load necessary package
library(echarts4r)
e_chart <- iris %>%
group_by(Species) %>% # <2>
e_charts(Sepal.Width) %>% # <3>
e_scatter(Sepal.Length, symbol_size = 7) %>% # <4>
e_x_axis(min = 1.5, max = 5) %>% # Limit x-axis
e_y_axis(min = 4, max = 8) %>% # Limit y-axis
e_axis_labels(
x = "Sepal Width",
y = "Sepal Length"
) %>%
e_tooltip(
trigger = 'item',
formatter = htmlwidgets::JS("
function(params){
return('Sepal Width: ' + params.value[0] + '<br />Sepal Length: ' + params.value[1])
}
")
) # <5>
# Display the plot
e_chart
# Load necessary package
library(echarts4r)
e_chart <- iris %>%
group_by(Species) %>% # <2>
e_charts(Sepal.Length) %>% # <3>
e_scatter(Sepal.Width, symbol_size = 7) %>% # <4>
e_x_axis(min = 1.5, max = 5) %>% # Limit x-axis
e_y_axis(min = 4, max = 8) %>% # Limit y-axis
e_axis_labels(
x = "Sepal Width",
y = "Sepal Length"
) %>%
e_tooltip(
trigger = 'item',
formatter = htmlwidgets::JS("
function(params){
return('Sepal Width: ' + params.value[0] + '<br />Sepal Length: ' + params.value[1])
}
")
) # <5>
# Display the plot
e_chart
e_chart <- iris %>%
group_by(Species) %>% # <2>
e_charts(Sepal.Length) %>% # <3>
e_scatter(Sepal.Width, symbol_size = 7) %>% # <4>
e_y_axis(min = 1.5, max = 5) %>% # Limit x-axis
e_x_axis(min = 4, max = 8) %>% # Limit y-axis
e_axis_labels(
x = "Sepal Width",
y = "Sepal Length"
) %>%
e_tooltip(
trigger = 'item',
formatter = htmlwidgets::JS("
function(params){
return('Sepal Width: ' + params.value[0] + '<br />Sepal Length: ' + params.value[1])
}
")
) # <5>
# Display the plot
e_chart
# Load necessary package
library(echarts4r)
e_chart <- iris %>%
group_by(Species) %>% # <2>
e_charts(Sepal.Length) %>% # <3>
e_scatter(Sepal.Width, symbol_size = 7) %>% # <4>
e_y_axis(min = 1.5, max = 5) %>% # Limit x-axis
e_x_axis(min = 4, max = 8) %>% # Limit y-axis
e_axis_labels(
x = "Sepal Width",
y = "Sepal Length"
) %>%
e_tooltip(
trigger = 'item',
formatter = htmlwidgets::JS("
function(params){
return('Sepal Length: ' + params.value[0] + '<br />Sepal Width: ' + params.value[1])
}
")
) # <5>
# Display the plot
e_chart
library(plotly) # <1>
library(ggplot2)
p <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point(size = 2, alpha = 0.5) +
theme_minimal() # <2>
pp <- ggplotly(p) # <3>
print(pp) # <4>
library(plotly) # <1>
library(ggplot2)
p <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point(size = 2, alpha = 1) +
theme_minimal() # <2>
pp <- ggplotly(p) # <3>
print(pp) # <4>
styler:::style_active_file()
styler:::style_active_file()
# Load necessary package
library(echarts4r)
e_chart <- iris %>%
group_by(Species) %>% # <1>
e_charts(Sepal.Length) %>% # <2>
e_scatter(Sepal.Width, symbol_size = 7) %>% # <3>
e_y_axis(min = 1.5, max = 5) %>% # <4>
e_x_axis(min = 4, max = 8) %>% # <5>
e_axis_labels(
x = "Sepal Width",
y = "Sepal Length"
) %>% # <6>
e_tooltip(
trigger = 'item',
formatter = htmlwidgets::JS("
function(params){
return('Sepal Length: ' + params.value[0] + '<br />Sepal Width: ' + params.value[1])
}
")
) # <7>
# Display the plot
e_chart
styler:::style_selection()
styler:::style_selection()
# Load the tidyr package
library(tidyr)
# View the first few rows of the airquality dataset
head(airquality)
# Create a new dataframe with all possible combinations of "Month" and "Day"
completed_airquality <- complete(airquality, Month, Day)
# View the first few rows of the completed dataframe
head(completed_airquality)
airquality
completed_airquality
sleep
completed_sleep
# Create a new dataframe with all possible combinations of "extra" and "group"
completed_sleep <- complete(sleep, extra, group)
completed_sleep
?complete
#| layout-ncol: 2
# Create the dataframe
(df <- tibble(
group = c(1, 2, 1, 2),
item_id = c(1, 2, 2, 3),
item_name = c("a", "a", "b", "b"),
value1 = c(1, NA, 3, 4),
value2 = 4:7
))
# Create a complete dataframe with all possible combinations of `group` and nested combinations of `item_id` and `item_name`, filling missing values in "value1" with 0
(complete_df <- df %>%
complete(group,
nesting(item_id, item_name),
fill = list(value1 = 0)))
?full_seq
(complete_df <- df %>% # <1>
complete(student_id = full_seq(student_id, 1), # <1>
nesting(day, class), # <1>
fill = list(value1 = 0), # <2>
explicit = FALSE)) # <3>
#| layout-ncol: 2
# Create the dataframe
df <- tribble(
~student_id, ~day, ~class, ~present
1, 1, "English", T,
#| layout-ncol: 2
# Create the dataframe
df <- tribble(
~student_id, ~day, ~class, ~present,
1, 1, "English", T,
2, 1, "English", T,
2, 1, "Science", T,
1, 2, "Math", T,
2, 2, "Math", T,
4, 2, "Math", T,
2, 2, "Science", T,
1, 2, "Science", T,
4, 2, "English", T,
1, 2, "English", T,
1, 3, "Math", T,
2, 3, "Math", T,
1, 3, "Math", T,
4, 3, "English", T,
)
(complete_df <- df %>% # <1>
complete(student_id = full_seq(student_id, 1), # <1>
nesting(day, class), # <1>
fill = list(value1 = 0), # <2>
explicit = FALSE)) # <3>
(complete_df <- df %>% # <1>
complete(student_id = full_seq(student_id, 1), # <1>
nesting(day, class), # <1>
fill = list(value1 = 0), # <2>
explicit = FALSE) %>% arrange(day, class, student_id, present)) # <3>
#| echo: false
#| warning: false
#| message: false
library(tidyverse)
options(qurto.max_rows = 5)
#| layout-ncol: 2
# Create the dataframe
df <- tribble(
~student_id, ~day, ~class, ~present,
1, 1, "English", T,
2, 1, "English", T,
2, 1, "Science", T,
1, 2, "Math", T,
2, 2, "Math", T,
4, 2, "Math", T,
2, 2, "Science", T,
1, 2, "Science", T,
4, 2, "English", T,
1, 2, "English", T,
1, 3, "Math", T,
2, 3, "Math", T,
1, 3, "Math", T,
4, 3, "English", T,
)
(complete_df <- df %>% # <1>
complete(student_id = full_seq(student_id, 1), # <1>
nesting(day, class), # <1>
fill = list(value1 = 0), # <2>
explicit = FALSE) %>% arrange(day, class, student_id, present)) # <3>
#| layout-ncol: 2
# Create the dataframe
df <- tribble(
~student_id, ~day, ~class, ~present,
1, 1, "English", T,
2, 1, "English", T,
2, 1, "Science", T,
1, 2, "Math", T,
2, 2, "Math", T,
4, 2, "Math", T,
2, 2, "Science", T,
1, 2, "Science", T,
4, 2, "English", T,
1, 2, "English", T,
1, 3, "Math", T,
2, 3, "Math", T,
1, 3, "Math", T,
4, 3, "English", T,
)
(complete_df <- df %>% # <1>
complete(student_id = full_seq(student_id, 1), # <1>
nesting(day, class), # <1>
fill = list(present = FALSE), # <2>
explicit = FALSE) %>% arrange(day, class, student_id, present)) # <3>
styler:::style_selection()
?fill
airquality
airquality %>%
arrange(Month, Day) %>%
fill(Ozone, .direction = "down"
airquality %>%
airquality %>%
arrange(Month, Day) %>%
fill(Ozone, .direction = "down")
airquality %>%
mutate(
Ozone = Ozone,
imp_fixed = replace(Ozone, is.na(Ozone), 0),  # <1>
imp_mean = replace(Ozone, is.na(Ozone), round(mean(Ozone, na.rm = TRUE), 2)), # <2>
imp_median = replace(Ozone, is.na(Ozone), median(Ozone, na.rm = TRUE)),  # <3>
.keep = "used"  # <4>
) %>%
arrange(Month, Day) %>%
fill(Ozone, .direction = "down") %>% # <5>
head_na()
# | layout-ncol: 2
df <- tribble( # <1>
~day, ~class, ~student_id, ~present,
1, "English", 1, T,
1, "English", 2, T,
1, "English", 4, T,
1, "Science", 2, T,
2, "Math", 1, T,
2, "Math", 2, T,
2, "Math", 4, T,
2, "English", 4, T,
2, "English", 1, T,
3, "Math", 1, T,
3, "Math", 2, T,
3, "Math", 1, T
)
(complete_df <- df %>% # <2>
complete(
student_id = full_seq(student_id, 4), # <3>
nesting(day, class), # <4>
fill = list(present = FALSE), # <5>
explicit = FALSE # <6>
) %>%
arrange(day, class, student_id, present)) # <7>
head(airquality)
airquality <- drop_na(airquality, Solar.R)
invisible(mice::md.pattern(airquality)) # <1>
head_na <- function(data, n = 5) {
data %>%
filter(is.na(Ozone)) %>%
head(n)
}
airquality %>%
mutate(
Ozone = Ozone,
imp_fixed = replace(Ozone, is.na(Ozone), 0),  # <1>
imp_mean = replace(Ozone, is.na(Ozone), round(mean(Ozone, na.rm = TRUE), 2)), # <2>
imp_median = replace(Ozone, is.na(Ozone), median(Ozone, na.rm = TRUE)),  # <3>
.keep = "used"  # <4>
) %>%
arrange(Month, Day) %>%
fill(Ozone, .direction = "down") %>% # <5>
head_na()
airquality
airquality %>%
arrange(Month, Day) %>%
mutate(
Ozone = Ozone,
imp_fixed = replace(Ozone, is.na(Ozone), 0),  # <1>
imp_mean = replace(Ozone, is.na(Ozone), round(mean(Ozone, na.rm = TRUE), 2)), # <2>
imp_median = replace(Ozone, is.na(Ozone), median(Ozone, na.rm = TRUE)), # <3>
imp_fill = Ozone,
.keep = "used"  # <4>
) %>%
fill(imp_fill, .direction = "down") %>% # <5>
head_na()
airquality %>%
arrange(Month, Day) %>%
mutate(
imp_fixed = replace(Ozone, is.na(Ozone), 0),  # <1>
imp_mean = replace(Ozone, is.na(Ozone), round(mean(Ozone, na.rm = TRUE), 2)), # <2>
imp_median = replace(Ozone, is.na(Ozone), median(Ozone, na.rm = TRUE)), # <3>
imp_fill = Ozone,
.keep = "used"  # <4>
) %>%
fill(imp_fill, .direction = "down") %>% # <5>
head_na()
head(airquality)
airquality <- drop_na(airquality, Solar.R)
invisible(mice::md.pattern(airquality)) # <1>
head_na <- function(data, n = 5) {
data %>%
filter(is.na(Ozone)) %>%
select(-Ozone) %>%
head(n)
}
airquality %>%
arrange(Month, Day) %>%
mutate(
imp_fixed = replace(Ozone, is.na(Ozone), 0),  # <1>
imp_mean = replace(Ozone, is.na(Ozone), round(mean(Ozone, na.rm = TRUE), 2)), # <2>
imp_median = replace(Ozone, is.na(Ozone), median(Ozone, na.rm = TRUE)), # <3>
imp_fill = Ozone,
.keep = "used"  # <4>
) %>%
fill(imp_fill, .direction = "down") %>% # <5>
head_na()
# | layout-ncol: 2
df <- tribble( # <1>
~day, ~class, ~student_id, ~present,
1, "English", 1, T,
1, "English", 2, T,
1, "English", 4, T,
1, "Science", 2, T,
2, "Math", 1, T,
2, "Math", 2, T,
2, "Math", 4, T,
2, "English", 4, T,
2, "English", 1, T,
3, "Math", 1, T,
3, "Math", 2, T,
3, "Math", 1, T
)
(complete_df <- df %>% # <2>
complete(
student_id = full_seq(student_id, 1), # <3>
nesting(day, class), # <4>
fill = list(present = FALSE), # <5>
explicit = FALSE # <6>
) %>%
arrange(day, class, student_id, present)) # <7>
styler:::style_selection()
styler:::style_active_file()
help(styler)
