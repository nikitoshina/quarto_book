print(i)
optimized_df[(i+1),] <- best_combination(optimized_df[i,3])
}
return(optimized_df[12])
return(optimized_df[12,])
(optimized_df[12,])
for (i in 1:11) {
print(i)
optimized_df[(i+1),] <- best_combination(optimized_df[i,3])
}
(optimized_df[12,])
(optimized_df[11,])
optimized_df
for (i in 1:10) {
print(i)
optimized_df[(i+1),] <- best_combination(optimized_df[i,3])
}
(optimized_df[11,])
(optimized_df[11,])
mapply(best_number_to_start,800:1032)
best_number_to_start <- function(y) {
optimized_df <- data.frame(0,0,y)
for (i in 1:10) {
print(i)
optimized_df[(i+1),] <- best_combination(optimized_df[i,3])
}
return(optimized_df[11,])
}
mapply(best_number_to_start,800:1032)
sxapply(best_number_to_start,800:1032)
sapply(best_number_to_start,800:1032)
stuff <- mapply(best_number_to_start,800:1032)
stuff
best_number_to_start <- function(y) {
optimized_df <- data.frame(0,0,y)
for (i in 1:10) {
print(i)
optimized_df[(i+1),] <- best_combination(optimized_df[i,3])
}
return(optimized_df[2,])
}
stuff <- mapply(best_number_to_start,800:1032)
stuff
stuff %>% as_tibble()
stuff %>% simplify()
stuff <- mapply(best_number_to_start,data_frame_people$q)
data_frame_people <- df(q=800:1032)
stuff <- mapply(best_number_to_start,data_frame_people$q)
data_frame_people <- df(q=800:1032)
data_frame_people
data_frame_people <- data.frame(q=800:1032)
stuff <- mapply(best_number_to_start,data_frame_people$q)
stuff
return(optimized_df[2,3])
best_number_to_start <- function(y) {
optimized_df <- data.frame(0,0,y)
for (i in 1:10) {
print(i)
optimized_df[(i+1),] <- best_combination(optimized_df[i,3])
}
return(optimized_df[2,3])
}
data_frame_people <- data.frame(q=800:1032)
stuff$max <- mapply(best_number_to_start,data_frame_people$q)
stuff
best_number_to_start <- function(y) {
optimized_df <- data.frame(0,0,y)
for (i in 1:10) {
print(i)
optimized_df[(i+1),] <- best_combination(optimized_df[i,3])
}
pirnt(optimized_df[2,3])
return(optimized_df[2,3])
}
data_frame_people <- data.frame(q=800:1032)
stuff$max <- mapply(best_number_to_start,data_frame_people$q)
best_number_to_start <- function(y) {
optimized_df <- data.frame(0,0,y)
for (i in 1:10) {
optimized_df[(i+1),] <- best_combination(optimized_df[i,3])
}
print(optimized_df[2,3])
return(optimized_df[2,3])
}
data_frame_people <- data.frame(q=800:1032)
stuff$max <- mapply(best_number_to_start,data_frame_people$q)
stuff
data_frame_people
optimized_df
best_number_to_start <- function(y) {
optimized_df <- data.frame(0,0,y)
for (i in 1:10) {
optimized_df[(i+1),'max'] <- best_combination(optimized_df[i,3])
}
print(optimized_df[2,3])
return(optimized_df[2]$max)
}
data_frame_people <- data.frame(q=800:1032)
stuff$max <- mapply(best_number_to_start,data_frame_people$q)
best_number_to_start <- function(y) {
optimized_df <- data.frame(0,0,max=y)
for (i in 1:10) {
optimized_df[(i+1),3] <- best_combination(optimized_df[i,3])
}
print(optimized_df[2,3])
return(optimized_df[2]$max)
}
data_frame_people <- data.frame(q=800:1032)
stuff$max <- mapply(best_number_to_start,data_frame_people$q)
stuff
best_number_to_start <- function(y) {
optimized_df <- data.frame(0,0,y)
for (i in 1:10) {
optimized_df[(i+1),] <- best_combination(optimized_df[i,3])
}
return(as.vector(optimized_df[2,3]))
}
data_frame_people <- data.frame(q=800:1032)
stuff$max <- mapply(best_number_to_start,data_frame_people$q)
stuff
data_frame_people
data_frame_people$max <- mapply(best_number_to_start,data_frame_people$q)
data_frame_people
stuff
data_frame_people
data_frame_people %>% as_tibble() %>% arrange(max)
data_frame_people %>% as_tibble() %>% arrange(desc(max))
data_frame_people <- data.frame(q=600:1032)
data_frame_people$max <- mapply(best_number_to_start,data_frame_people$q)
data_frame_people
data_frame_people %>% as_tibble() %>% arrange(desc(max))
best_number_to_start <- function(y) {
optimized_df <- data.frame(0,0,y)
for (i in 1:10) {
optimized_df[(i+1),] <- best_combination(optimized_df[i,3])
}
return(list(optimized_df[2,3]))
}
data_frame_people <- data.frame(q=600:1032)
data_frame_people$max <- mapply(best_number_to_start,data_frame_people$q)
data_frame_people %>% as_tibble() %>% arrange(desc(max))
best_number_to_start <- function(y) {
optimized_df <- data.frame(0,0,y)
for (i in 1:10) {
optimized_df[(i+1),] <- best_combination(optimized_df[i,3])
}
return(list(optimized_df[2]))
}
data_frame_people <- data.frame(q=600:1032)
data_frame_people$max <- mapply(best_number_to_start,data_frame_people$q)
data_frame_people %>% as_tibble() %>% arrange(desc(max))
best_number_to_start <- function(y) {
optimized_df <- data.frame(0,0,y)
for (i in 1:10) {
optimized_df[(i+1),] <- best_combination(optimized_df[i,3])
}
return(list(optimized_df[3]))
}
data_frame_people <- data.frame(q=600:1032)
data_frame_people$max <- mapply(best_number_to_start,data_frame_people$q)
data_frame_people %>% as_tibble() %>% arrange(desc(max))
best_number_to_start <- function(y) {
optimized_df <- data.frame(0,0,y)
for (i in 1:10) {
optimized_df[(i+1),] <- best_combination(optimized_df[i,3])
}
return(list(optimized_df[2,]))
}
data_frame_people <- data.frame(q=600:1032)
data_frame_people$max <- mapply(best_number_to_start,data_frame_people$q)
data_frame_people %>% as_tibble() %>% arrange(desc(max))
data_frame_people %>% as_tibble() %>% unnest(max)
calc_Y_2 <- function(a, b, Yprev) {
Y_2 <- Y_1 + 5*a - Yprev * 0.1 * (0.85)^b
return(Y_2)
}
# Define the function to calculate Y_2
best_combination <- function(Yprev) {
df <- data.frame(a = 0:20)
df$b <- 20 - df$a
# Apply the function to each row in the data frame
df$Y_2 <- mapply(calc_Y_2, df$a, df$b, Yprev)
df[which.max(df$Y_2), ]
}
best_number_to_start <- function(y) {
optimized_df <- data.frame(0,0,y)
for (i in 1:10) {
optimized_df[(i+1),] <- best_combination(optimized_df[i,3])
}
return(list(optimized_df[2,]))
}
data_frame_people <- data.frame(q=600:1032)
data_frame_people$max <- mapply(best_number_to_start,data_frame_people$q)
data_frame_people %>% as_tibble() %>% unnest(max)
calc_Y_2 <- function(a, b, Yprev) {
df <- data.frame(a = 0:20)
df$b <- 20 - df$a
Y_2 <- Y_1 + 5*a - Yprev * 0.1 * (0.85)^b
return(Y_2)
}
# Define the function to calculate Y_2
best_combination <- function(Yprev) {
# Apply the function to each row in the data frame
df$Y_2 <- mapply(calc_Y_2, df$a, df$b, Yprev)
df[which.max(df$Y_2), ]
}
best_number_to_start <- function(y) {
optimized_df <- data.frame(0,0,y)
for (i in 1:10) {
optimized_df[(i+1),] <- best_combination(optimized_df[i,3])
}
return(list(optimized_df[2,]))
}
data_frame_people <- data.frame(q=600:1032)
data_frame_people$max <- mapply(best_number_to_start,data_frame_people$q)
data_frame_people %>% as_tibble() %>% unnest(max)
best_combination
(optimized_df[i,3])
best_combination(600)
600 + 5*16 - 600 * 0.1 * (0.85)^4
calc_Y_2 <- function(a, b, Yprev) {
df <- data.frame(a = 0:20)
df$b <- 20 - df$a
Y_2 <- Yprev + 5*a - Yprev * 0.1 * (0.85)^b
return(Y_2)
}
# Define the function to calculate Y_2
best_combination <- function(Yprev) {
# Apply the function to each row in the data frame
df$Y_2 <- mapply(calc_Y_2, df$a, df$b, Yprev)
df[which.max(df$Y_2), ]
}
best_number_to_start <- function(y) {
optimized_df <- data.frame(0,0,y)
for (i in 1:10) {
optimized_df[(i+1),] <- best_combination(optimized_df[i,3])
}
return(list(optimized_df[2,]))
}
data_frame_people <- data.frame(q=600:1032)
data_frame_people$max <- mapply(best_number_to_start,data_frame_people$q)
data_frame_people %>% as_tibble() %>% unnest(max)
data_frame_people %>% as_tibble() %>% unnest(max) %>% arrange(desc(y))
for (i in 1:10) {
optimized_df[(i+1),] <- best_combination(optimized_df[i,3])
}
optimized_df
optimized_df <- data.frame(0,0,1000)
for (i in 1:10) {
optimized_df <- data.frame(0,0,1000)
optimized_df[(i+1),] <- best_combination(optimized_df[i,3])
}
optimized_df
optimized_df <- data.frame(0,0,1000)
for (i in 1:10) {
optimized_df[(i+1),] <- best_combination(optimized_df[i,3])
}
optimized_df
as_tibble(optimized_df)
styler:::style_selection()
as_tibble(optimized_df) %>% rename(
"aquisition" = "X0",
"support" = "X0.1",
"End_of_month_customers" = " X1000"
)
as_tibble(optimized_df) %>% rename(
"aquisition" = "X0",
"support" = "X0.1",
"End_of_month_customers" = "X1000"
)
for (i in 1:11) {
optimized_df[(i+1),] <- best_combination(optimized_df[i,3])
}
as_tibble(optimized_df) %>% rename(
"aquisition" = "X0",
"support" = "X0.1",
"End_of_month_customers" = "X1000"
)
as_tibble(optimized_df) %>% rename(
"aquisition" = "X0",
"support" = "X0.1",
"End_of_month_customers" = "X1000"
) %>% mutate("beg_customers" = lag(End_of_month_customers))
as_tibble(optimized_df) %>% rename(
"aquisition" = "X0",
"support" = "X0.1",
"End_of_month_customers" = "X1000"
) %>%
mutate("beg_customers" = lag(End_of_month_customers)) %>%
slice(-1)
as_tibble(optimized_df) %>% rename(
"aquisition" = "X0",
"support" = "X0.1",
"End_of_month_customers" = "X1000"
) %>%
mutate("beg_customers" = lag(End_of_month_customers)) %>%
slice(-1) %>%
rownames_to_column()
as_tibble(optimized_df) %>% rename(
"aquisition" = "X0",
"support" = "X0.1",
"End_of_month_customers" = "X1000"
) %>%
mutate("beg_customers" = lag(End_of_month_customers)) %>%
slice(-1) %>%
rownames_to_column(var = "month")
results <- as_tibble(optimized_df) %>% rename(
"aquisition" = "X0",
"support" = "X0.1",
"End_of_month_customers" = "X1000"
) %>%
mutate("beg_customers" = lag(End_of_month_customers)) %>%
slice(-1) %>%
rownames_to_column(var = "month")
total_cash <- tail(results)$End_of_month_customers
total_cash <- tail(results)$End_of_month_customers * 100 + 20 * (25 * 25)
total_cash
tail(results)$End_of_month_customers
total_cash <- tail(results,n = 1)$End_of_month_customers * 100 + 20 * (25 * 25)
total_cash
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
library(tidyverse)
# a is for acquisition
# b is for support
# churn rate is 10% = 0.1
calc_Y_2 <- function(a, b, Yprev) {
# Create a data frame with all possible combinations of a and b
df <- data.frame(a = 0:20)
df$b <- 20 - df$a
# The function of the next month's customer base baded on a and b
Y_2 <- Yprev + 5 * a - Yprev * 0.1 * (0.85)^b
return(Y_2)
}
# Define the function to calculate Y_2
best_combination <- function(Yprev) {
# Apply the function to each row in the data frame
df$Y_2 <- mapply(calc_Y_2, df$a, df$b, Yprev)
# Find which combination yield the largest number of customers
df[which.max(df$Y_2), ]
}
# Define a starting point 1000 people
optimized_df <- data.frame(0, 0, 1000)
# Optimize for 11 months
for (i in 1:11) {
optimized_df[(i + 1), ] <- best_combination(optimized_df[i, 3])
}
# Clean up the data frame
results <- as_tibble(optimized_df) %>%
rename(
"aquisition" = "X0",
"support" = "X0.1",
"End_of_month_customers" = "X1000"
) %>%
mutate("beg_customers" = lag(End_of_month_customers)) %>%
slice(-1) %>%
rownames_to_column(var = "month")
# Put everyone into account managers
# 20 managers bring 25 extra dollars for each of 25 customers
total_cash <- tail(results, n = 1)$End_of_month_customers * 100 + 20 * (25 * 25)
results
total_cash
install.packages(c("httr", "jsonlite"))
library(httr)
library(jsonlite)
res <- GET("https://cat-fact.herokuapp.com")
res <- GET("https://cat-fact.herokuapp.com")
print(res)
res <- GET("https://cat-fact.herokuapp.com/facts")
print(res)
res
rawToChar(res$content)
res$content
fromJSON(rawToChar(res$content))
data = fromJSON(rawToChar(res$content))
names(data)
data$text
res <- GET("https://gutendex.com")
print(res)
data = fromJSON(rawToChar(res$content))
res <- GET("https://gutendex.com/books")
print(res)
data = fromJSON(rawToChar(res$content))
names(data)
data
data = fromJSON(rawToChar(res$content))
names(data)
data
data$results
data$results$title
res <- GET("https://gutendex.com/books?author_year_end=-499")
print(res)
data = fromJSON(rawToChar(res$content))
names(data)
data$results$title
?GET())
?GET()
res <- GET("https://gutendex.com/books",
query = list(author_year_end = "-499"))
print(res)
data <- fromJSON(rawToChar(res$content))
data <- fromJSON(rawToChar(res$content))
data
data$results %>% select(title, subjects) %>% mutate(subject = paste(unlist(subjects), sep = ", "))
library(tidyverse)
data$results %>% select(title, subjects) %>% mutate(subject = paste(unlist(subjects), sep = ", "))
data$results %>% select(title, subjects) %>% rowwise() %>% mutate(subject = paste(unlist(subjects), sep = ", "))
data$results %>% select(title, subjects) %>% rowwise() %>% mutate(subject = paste(subjects, sep = ", "))
data$results %>% select(title, subjects) %>%
rowwise() %>%
mutate(subjects = paste(subjects, sep = ", "))
data$results %>% select(title, subjects) %>%
rowwise() %>%
mutate(subjects = paste(unnest(subjects), sep = ", "))
data$results %>% select(title, subjects) %>%
rowwise() %>%
mutate(subjects = map(subjects, ~paste(., sep=", ")))
data$results %>% select(title, subjects)
data$results %>% select(title, subjects) %>%
mutate(subjects = map(subjects, ~paste(., sep=", ")))
data$results %>% select(title, subjects) %>%
mutate(subjects = map(subjects, ~paste(unlist(.), sep=", ")))
data$results %>% select(title, subjects) %>%
mutate(subject = map(subjects, ~paste(unlist(.), sep=", ")))
data$results %>% select(title, subjects) %>%
mutate(subject = map(subjects, ~paste(unlist(.), sep=", "))) %>%
unnest(subject)
data$results %>% select(title, subjects) %>%
mutate(subject = map(subjects, ~c(., sep=", "))) %>%
unnest(subject)
data$results %>% select(title, subjects) %>%
mutate(subject = map(subjects, ~c(., sep=", "))) %>%
unnest(subjects)
data$results %>% select(title, subjects) %>%
mutate(subject = map(subjects, ~str_c(., sep=", ")))
data$results %>% select(title, subjects) %>%
mutate(subject = map(subjects, ~print(str_c(., sep=", "))))
mutate(subject = map(subjects, ~print(.))
data$results %>% select(title, subjects) %>%
data$results %>% select(title, subjects) %>%
mutate(subject = map(subjects, ~print(.)))
data$results %>% select(title, subjects) %>%
mutate(subject = map(subjects, ~print(map(., ~paste(.)))))
data$results %>% select(title, subjects) %>%
mutate(subject = map(subjects, ~print(paste(.))))
data$results %>% select(title, subjects) %>%
mutate(subject = map(subjects, ~print(class(.))))
data$results %>% select(title, subjects) %>%
mutate(subject = map(subjects, ~print(paste(., collapse=", "))))
data$results %>% select(title, subjects) %>%
mutate(subject = map(subjects, ~paste(., collapse=", ")))
data$results %>% select(title, subjects) %>%
mutate(subject = map_chr(subjects, ~paste(., collapse=", ")))
# Make the POST request with the request body
response <- GET("https://gutendex.com/books",
query = list(author_year_end = -499,
topic = "Epic Poetry"
),
add_headers("Content-Type" = "application/json"))
response
response |> rawToChar() |> fromJSON() |> getElement("result")
library(httr)
library(jsonlite)
# Make the POST request with the request body
response <- GET("https://gutendex.com/books",
query = list(author_year_end = -499,
topic = "Epic Poetry"
),
add_headers("Key" = "Your Key"))
response |> rawToChar() |> fromJSON() |> getElement("result")
response |> getElement("content") |> rawToChar() |> fromJSON() |> getElement("result")
response |> getElement("content")
response |> getElement("content") |> rawToChar() |> fromJSON()
response |> getElement("content") |> rawToChar() |> fromJSON() |> getElement("title")
response |> getElement("content") |> rawToChar() |> fromJSON()
response |> getElement("content") |> rawToChar() |> fromJSON() |> getElement("results")
response |> getElement("content") |> rawToChar() |> fromJSON() |> getElement("results") |> getElement("title")
# Make the POST request with the request body
response <- GET("https://gutendex.com/books",
query = list(author_year_end = -499,
topic = "Epic Poetry",
languages = "fr",
),
add_headers("Key" = "Your Key"))
# Make the POST request with the request body
response <- GET("https://gutendex.com/books",
query = list(author_year_end = -499,
topic = "Epic Poetry",
languages = "fr"
),
add_headers("Key" = "Your Key"))
response |> getElement("content") |> rawToChar() |> fromJSON() |> getElement("results") |> getElement("title")
styler:::style_selection()
styler:::style_selection()
# Make the POST request with the request body
response <- GET(
url="https://gutendex.com/books",
query = list(
author_year_end = -499,
topic = "Epic Poetry",
languages = "fr"
),
add_headers("Key" = "Your Key")
)
styler:::style_selection()
head(data$results$title, n=5)
head(data$results, n=5)
styler:::style_selection()
library(googlesheets4)
url <- "https://docs.google.com/spreadsheets/d/1CdPIP7T66YY4i7YbaEOAPT3ajqoQrrjT9sX8zGmaewk/edit#gid=785953899"
gs4_auth(cache = ".secrets_gs4", email = "natkachenko@dons.usfca.edu")
